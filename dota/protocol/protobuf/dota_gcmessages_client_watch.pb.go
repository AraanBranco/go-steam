// Code generated by protoc-gen-go.
// source: dota_gcmessages_client_watch.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package protobuf is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package protobuf to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CMsgWatchGameResponse_WatchGameResult int32

const (
	CMsgWatchGameResponse_PENDING                   CMsgWatchGameResponse_WatchGameResult = 0
	CMsgWatchGameResponse_READY                     CMsgWatchGameResponse_WatchGameResult = 1
	CMsgWatchGameResponse_GAMESERVERNOTFOUND        CMsgWatchGameResponse_WatchGameResult = 2
	CMsgWatchGameResponse_UNAVAILABLE               CMsgWatchGameResponse_WatchGameResult = 3
	CMsgWatchGameResponse_CANCELLED                 CMsgWatchGameResponse_WatchGameResult = 4
	CMsgWatchGameResponse_INCOMPATIBLEVERSION       CMsgWatchGameResponse_WatchGameResult = 5
	CMsgWatchGameResponse_MISSINGLEAGUESUBSCRIPTION CMsgWatchGameResponse_WatchGameResult = 6
	CMsgWatchGameResponse_LOBBYNOTFOUND             CMsgWatchGameResponse_WatchGameResult = 7
)

var CMsgWatchGameResponse_WatchGameResult_name = map[int32]string{
	0: "PENDING",
	1: "READY",
	2: "GAMESERVERNOTFOUND",
	3: "UNAVAILABLE",
	4: "CANCELLED",
	5: "INCOMPATIBLEVERSION",
	6: "MISSINGLEAGUESUBSCRIPTION",
	7: "LOBBYNOTFOUND",
}
var CMsgWatchGameResponse_WatchGameResult_value = map[string]int32{
	"PENDING":                   0,
	"READY":                     1,
	"GAMESERVERNOTFOUND":        2,
	"UNAVAILABLE":               3,
	"CANCELLED":                 4,
	"INCOMPATIBLEVERSION":       5,
	"MISSINGLEAGUESUBSCRIPTION": 6,
	"LOBBYNOTFOUND":             7,
}

func (x CMsgWatchGameResponse_WatchGameResult) Enum() *CMsgWatchGameResponse_WatchGameResult {
	p := new(CMsgWatchGameResponse_WatchGameResult)
	*p = x
	return p
}
func (x CMsgWatchGameResponse_WatchGameResult) String() string {
	return proto.EnumName(CMsgWatchGameResponse_WatchGameResult_name, int32(x))
}
func (x *CMsgWatchGameResponse_WatchGameResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgWatchGameResponse_WatchGameResult_value, data, "CMsgWatchGameResponse_WatchGameResult")
	if err != nil {
		return err
	}
	*x = CMsgWatchGameResponse_WatchGameResult(value)
	return nil
}
func (CMsgWatchGameResponse_WatchGameResult) EnumDescriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{19, 0}
}

type CSourceTVGameSmall struct {
	ActivateTime               *uint32                      `protobuf:"varint,1,opt,name=activate_time,json=activateTime" json:"activate_time,omitempty"`
	DeactivateTime             *uint32                      `protobuf:"varint,2,opt,name=deactivate_time,json=deactivateTime" json:"deactivate_time,omitempty"`
	ServerSteamId              *uint64                      `protobuf:"varint,3,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId                    *uint64                      `protobuf:"varint,4,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	LeagueId                   *uint32                      `protobuf:"varint,5,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LobbyType                  *uint32                      `protobuf:"varint,6,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	GameTime                   *int32                       `protobuf:"varint,7,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Delay                      *uint32                      `protobuf:"varint,8,opt,name=delay" json:"delay,omitempty"`
	Spectators                 *uint32                      `protobuf:"varint,9,opt,name=spectators" json:"spectators,omitempty"`
	GameMode                   *uint32                      `protobuf:"varint,10,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	AverageMmr                 *uint32                      `protobuf:"varint,11,opt,name=average_mmr,json=averageMmr" json:"average_mmr,omitempty"`
	TeamNameRadiant            *string                      `protobuf:"bytes,15,opt,name=team_name_radiant,json=teamNameRadiant" json:"team_name_radiant,omitempty"`
	TeamNameDire               *string                      `protobuf:"bytes,16,opt,name=team_name_dire,json=teamNameDire" json:"team_name_dire,omitempty"`
	TeamLogoRadiant            *uint64                      `protobuf:"fixed64,24,opt,name=team_logo_radiant,json=teamLogoRadiant" json:"team_logo_radiant,omitempty"`
	TeamLogoDire               *uint64                      `protobuf:"fixed64,25,opt,name=team_logo_dire,json=teamLogoDire" json:"team_logo_dire,omitempty"`
	SortScore                  *uint32                      `protobuf:"varint,17,opt,name=sort_score,json=sortScore" json:"sort_score,omitempty"`
	LastUpdateTime             *float32                     `protobuf:"fixed32,18,opt,name=last_update_time,json=lastUpdateTime" json:"last_update_time,omitempty"`
	RadiantLead                *int32                       `protobuf:"varint,19,opt,name=radiant_lead,json=radiantLead" json:"radiant_lead,omitempty"`
	RadiantScore               *uint32                      `protobuf:"varint,20,opt,name=radiant_score,json=radiantScore" json:"radiant_score,omitempty"`
	DireScore                  *uint32                      `protobuf:"varint,21,opt,name=dire_score,json=direScore" json:"dire_score,omitempty"`
	Players                    []*CSourceTVGameSmall_Player `protobuf:"bytes,22,rep,name=players" json:"players,omitempty"`
	BuildingState              *uint32                      `protobuf:"fixed32,23,opt,name=building_state,json=buildingState" json:"building_state,omitempty"`
	WeekendTourneyTournamentId *uint32                      `protobuf:"varint,26,opt,name=weekend_tourney_tournament_id,json=weekendTourneyTournamentId" json:"weekend_tourney_tournament_id,omitempty"`
	WeekendTourneyDivision     *uint32                      `protobuf:"varint,27,opt,name=weekend_tourney_division,json=weekendTourneyDivision" json:"weekend_tourney_division,omitempty"`
	WeekendTourneySkillLevel   *uint32                      `protobuf:"varint,28,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	WeekendTourneyBracketRound *uint32                      `protobuf:"varint,29,opt,name=weekend_tourney_bracket_round,json=weekendTourneyBracketRound" json:"weekend_tourney_bracket_round,omitempty"`
	XXX_unrecognized           []byte                       `json:"-"`
}

func (m *CSourceTVGameSmall) Reset()                    { *m = CSourceTVGameSmall{} }
func (m *CSourceTVGameSmall) String() string            { return proto.CompactTextString(m) }
func (*CSourceTVGameSmall) ProtoMessage()               {}
func (*CSourceTVGameSmall) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{0} }

func (m *CSourceTVGameSmall) GetActivateTime() uint32 {
	if m != nil && m.ActivateTime != nil {
		return *m.ActivateTime
	}
	return 0
}

func (m *CSourceTVGameSmall) GetDeactivateTime() uint32 {
	if m != nil && m.DeactivateTime != nil {
		return *m.DeactivateTime
	}
	return 0
}

func (m *CSourceTVGameSmall) GetServerSteamId() uint64 {
	if m != nil && m.ServerSteamId != nil {
		return *m.ServerSteamId
	}
	return 0
}

func (m *CSourceTVGameSmall) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CSourceTVGameSmall) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CSourceTVGameSmall) GetLobbyType() uint32 {
	if m != nil && m.LobbyType != nil {
		return *m.LobbyType
	}
	return 0
}

func (m *CSourceTVGameSmall) GetGameTime() int32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CSourceTVGameSmall) GetDelay() uint32 {
	if m != nil && m.Delay != nil {
		return *m.Delay
	}
	return 0
}

func (m *CSourceTVGameSmall) GetSpectators() uint32 {
	if m != nil && m.Spectators != nil {
		return *m.Spectators
	}
	return 0
}

func (m *CSourceTVGameSmall) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CSourceTVGameSmall) GetAverageMmr() uint32 {
	if m != nil && m.AverageMmr != nil {
		return *m.AverageMmr
	}
	return 0
}

func (m *CSourceTVGameSmall) GetTeamNameRadiant() string {
	if m != nil && m.TeamNameRadiant != nil {
		return *m.TeamNameRadiant
	}
	return ""
}

func (m *CSourceTVGameSmall) GetTeamNameDire() string {
	if m != nil && m.TeamNameDire != nil {
		return *m.TeamNameDire
	}
	return ""
}

func (m *CSourceTVGameSmall) GetTeamLogoRadiant() uint64 {
	if m != nil && m.TeamLogoRadiant != nil {
		return *m.TeamLogoRadiant
	}
	return 0
}

func (m *CSourceTVGameSmall) GetTeamLogoDire() uint64 {
	if m != nil && m.TeamLogoDire != nil {
		return *m.TeamLogoDire
	}
	return 0
}

func (m *CSourceTVGameSmall) GetSortScore() uint32 {
	if m != nil && m.SortScore != nil {
		return *m.SortScore
	}
	return 0
}

func (m *CSourceTVGameSmall) GetLastUpdateTime() float32 {
	if m != nil && m.LastUpdateTime != nil {
		return *m.LastUpdateTime
	}
	return 0
}

func (m *CSourceTVGameSmall) GetRadiantLead() int32 {
	if m != nil && m.RadiantLead != nil {
		return *m.RadiantLead
	}
	return 0
}

func (m *CSourceTVGameSmall) GetRadiantScore() uint32 {
	if m != nil && m.RadiantScore != nil {
		return *m.RadiantScore
	}
	return 0
}

func (m *CSourceTVGameSmall) GetDireScore() uint32 {
	if m != nil && m.DireScore != nil {
		return *m.DireScore
	}
	return 0
}

func (m *CSourceTVGameSmall) GetPlayers() []*CSourceTVGameSmall_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CSourceTVGameSmall) GetBuildingState() uint32 {
	if m != nil && m.BuildingState != nil {
		return *m.BuildingState
	}
	return 0
}

func (m *CSourceTVGameSmall) GetWeekendTourneyTournamentId() uint32 {
	if m != nil && m.WeekendTourneyTournamentId != nil {
		return *m.WeekendTourneyTournamentId
	}
	return 0
}

func (m *CSourceTVGameSmall) GetWeekendTourneyDivision() uint32 {
	if m != nil && m.WeekendTourneyDivision != nil {
		return *m.WeekendTourneyDivision
	}
	return 0
}

func (m *CSourceTVGameSmall) GetWeekendTourneySkillLevel() uint32 {
	if m != nil && m.WeekendTourneySkillLevel != nil {
		return *m.WeekendTourneySkillLevel
	}
	return 0
}

func (m *CSourceTVGameSmall) GetWeekendTourneyBracketRound() uint32 {
	if m != nil && m.WeekendTourneyBracketRound != nil {
		return *m.WeekendTourneyBracketRound
	}
	return 0
}

type CSourceTVGameSmall_Player struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId           *uint32 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSourceTVGameSmall_Player) Reset()                    { *m = CSourceTVGameSmall_Player{} }
func (m *CSourceTVGameSmall_Player) String() string            { return proto.CompactTextString(m) }
func (*CSourceTVGameSmall_Player) ProtoMessage()               {}
func (*CSourceTVGameSmall_Player) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{0, 0} }

func (m *CSourceTVGameSmall_Player) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSourceTVGameSmall_Player) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

type CMsgClientToGCFindTopSourceTVGames struct {
	SearchKey        *string  `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	LeagueId         *uint32  `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	HeroId           *uint32  `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StartGame        *uint32  `protobuf:"varint,4,opt,name=start_game,json=startGame" json:"start_game,omitempty"`
	GameListIndex    *uint32  `protobuf:"varint,5,opt,name=game_list_index,json=gameListIndex" json:"game_list_index,omitempty"`
	LobbyIds         []uint64 `protobuf:"varint,6,rep,name=lobby_ids,json=lobbyIds" json:"lobby_ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgClientToGCFindTopSourceTVGames) Reset()         { *m = CMsgClientToGCFindTopSourceTVGames{} }
func (m *CMsgClientToGCFindTopSourceTVGames) String() string { return proto.CompactTextString(m) }
func (*CMsgClientToGCFindTopSourceTVGames) ProtoMessage()    {}
func (*CMsgClientToGCFindTopSourceTVGames) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{1}
}

func (m *CMsgClientToGCFindTopSourceTVGames) GetSearchKey() string {
	if m != nil && m.SearchKey != nil {
		return *m.SearchKey
	}
	return ""
}

func (m *CMsgClientToGCFindTopSourceTVGames) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgClientToGCFindTopSourceTVGames) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgClientToGCFindTopSourceTVGames) GetStartGame() uint32 {
	if m != nil && m.StartGame != nil {
		return *m.StartGame
	}
	return 0
}

func (m *CMsgClientToGCFindTopSourceTVGames) GetGameListIndex() uint32 {
	if m != nil && m.GameListIndex != nil {
		return *m.GameListIndex
	}
	return 0
}

func (m *CMsgClientToGCFindTopSourceTVGames) GetLobbyIds() []uint64 {
	if m != nil {
		return m.LobbyIds
	}
	return nil
}

type CMsgGCToClientFindTopSourceTVGamesResponse struct {
	SearchKey        *string               `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	LeagueId         *uint32               `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	HeroId           *uint32               `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StartGame        *uint32               `protobuf:"varint,4,opt,name=start_game,json=startGame" json:"start_game,omitempty"`
	NumGames         *uint32               `protobuf:"varint,5,opt,name=num_games,json=numGames" json:"num_games,omitempty"`
	GameListIndex    *uint32               `protobuf:"varint,6,opt,name=game_list_index,json=gameListIndex" json:"game_list_index,omitempty"`
	GameList         []*CSourceTVGameSmall `protobuf:"bytes,7,rep,name=game_list,json=gameList" json:"game_list,omitempty"`
	SpecificGames    *bool                 `protobuf:"varint,8,opt,name=specific_games,json=specificGames" json:"specific_games,omitempty"`
	BotGame          *CSourceTVGameSmall   `protobuf:"bytes,9,opt,name=bot_game,json=botGame" json:"bot_game,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMsgGCToClientFindTopSourceTVGamesResponse) Reset() {
	*m = CMsgGCToClientFindTopSourceTVGamesResponse{}
}
func (m *CMsgGCToClientFindTopSourceTVGamesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCToClientFindTopSourceTVGamesResponse) ProtoMessage() {}
func (*CMsgGCToClientFindTopSourceTVGamesResponse) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{2}
}

func (m *CMsgGCToClientFindTopSourceTVGamesResponse) GetSearchKey() string {
	if m != nil && m.SearchKey != nil {
		return *m.SearchKey
	}
	return ""
}

func (m *CMsgGCToClientFindTopSourceTVGamesResponse) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgGCToClientFindTopSourceTVGamesResponse) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgGCToClientFindTopSourceTVGamesResponse) GetStartGame() uint32 {
	if m != nil && m.StartGame != nil {
		return *m.StartGame
	}
	return 0
}

func (m *CMsgGCToClientFindTopSourceTVGamesResponse) GetNumGames() uint32 {
	if m != nil && m.NumGames != nil {
		return *m.NumGames
	}
	return 0
}

func (m *CMsgGCToClientFindTopSourceTVGamesResponse) GetGameListIndex() uint32 {
	if m != nil && m.GameListIndex != nil {
		return *m.GameListIndex
	}
	return 0
}

func (m *CMsgGCToClientFindTopSourceTVGamesResponse) GetGameList() []*CSourceTVGameSmall {
	if m != nil {
		return m.GameList
	}
	return nil
}

func (m *CMsgGCToClientFindTopSourceTVGamesResponse) GetSpecificGames() bool {
	if m != nil && m.SpecificGames != nil {
		return *m.SpecificGames
	}
	return false
}

func (m *CMsgGCToClientFindTopSourceTVGamesResponse) GetBotGame() *CSourceTVGameSmall {
	if m != nil {
		return m.BotGame
	}
	return nil
}

type CMsgGCToClientTopWeekendTourneyGames struct {
	LiveGames        []*CSourceTVGameSmall `protobuf:"bytes,1,rep,name=live_games,json=liveGames" json:"live_games,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMsgGCToClientTopWeekendTourneyGames) Reset()         { *m = CMsgGCToClientTopWeekendTourneyGames{} }
func (m *CMsgGCToClientTopWeekendTourneyGames) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToClientTopWeekendTourneyGames) ProtoMessage()    {}
func (*CMsgGCToClientTopWeekendTourneyGames) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{3}
}

func (m *CMsgGCToClientTopWeekendTourneyGames) GetLiveGames() []*CSourceTVGameSmall {
	if m != nil {
		return m.LiveGames
	}
	return nil
}

type CMsgClientToGCTopMatchesRequest struct {
	HeroId           *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	PlayerAccountId  *uint32 `protobuf:"varint,2,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	TeamId           *uint32 `protobuf:"varint,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientToGCTopMatchesRequest) Reset()                    { *m = CMsgClientToGCTopMatchesRequest{} }
func (m *CMsgClientToGCTopMatchesRequest) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientToGCTopMatchesRequest) ProtoMessage()               {}
func (*CMsgClientToGCTopMatchesRequest) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{4} }

func (m *CMsgClientToGCTopMatchesRequest) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgClientToGCTopMatchesRequest) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

func (m *CMsgClientToGCTopMatchesRequest) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

type CMsgClientToGCTopLeagueMatchesRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgClientToGCTopLeagueMatchesRequest) Reset()         { *m = CMsgClientToGCTopLeagueMatchesRequest{} }
func (m *CMsgClientToGCTopLeagueMatchesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgClientToGCTopLeagueMatchesRequest) ProtoMessage()    {}
func (*CMsgClientToGCTopLeagueMatchesRequest) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{5}
}

type CMsgClientToGCTopFriendMatchesRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgClientToGCTopFriendMatchesRequest) Reset()         { *m = CMsgClientToGCTopFriendMatchesRequest{} }
func (m *CMsgClientToGCTopFriendMatchesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgClientToGCTopFriendMatchesRequest) ProtoMessage()    {}
func (*CMsgClientToGCTopFriendMatchesRequest) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{6}
}

type CMsgClientToGCMatchesMinimalRequest struct {
	MatchIds         []uint64 `protobuf:"varint,1,rep,name=match_ids,json=matchIds" json:"match_ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgClientToGCMatchesMinimalRequest) Reset()         { *m = CMsgClientToGCMatchesMinimalRequest{} }
func (m *CMsgClientToGCMatchesMinimalRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgClientToGCMatchesMinimalRequest) ProtoMessage()    {}
func (*CMsgClientToGCMatchesMinimalRequest) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{7}
}

func (m *CMsgClientToGCMatchesMinimalRequest) GetMatchIds() []uint64 {
	if m != nil {
		return m.MatchIds
	}
	return nil
}

type CMsgClientToGCMatchesMinimalResponse struct {
	Matches          []*CMsgDOTAMatchMinimal `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	LastMatch        *bool                   `protobuf:"varint,2,opt,name=last_match,json=lastMatch" json:"last_match,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CMsgClientToGCMatchesMinimalResponse) Reset()         { *m = CMsgClientToGCMatchesMinimalResponse{} }
func (m *CMsgClientToGCMatchesMinimalResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgClientToGCMatchesMinimalResponse) ProtoMessage()    {}
func (*CMsgClientToGCMatchesMinimalResponse) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{8}
}

func (m *CMsgClientToGCMatchesMinimalResponse) GetMatches() []*CMsgDOTAMatchMinimal {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *CMsgClientToGCMatchesMinimalResponse) GetLastMatch() bool {
	if m != nil && m.LastMatch != nil {
		return *m.LastMatch
	}
	return false
}

type CMsgGCToClientTopLeagueMatchesResponse struct {
	Matches          []*CMsgDOTAMatchMinimal `protobuf:"bytes,2,rep,name=matches" json:"matches,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CMsgGCToClientTopLeagueMatchesResponse) Reset() {
	*m = CMsgGCToClientTopLeagueMatchesResponse{}
}
func (m *CMsgGCToClientTopLeagueMatchesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToClientTopLeagueMatchesResponse) ProtoMessage()    {}
func (*CMsgGCToClientTopLeagueMatchesResponse) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{9}
}

func (m *CMsgGCToClientTopLeagueMatchesResponse) GetMatches() []*CMsgDOTAMatchMinimal {
	if m != nil {
		return m.Matches
	}
	return nil
}

type CMsgGCToClientTopFriendMatchesResponse struct {
	Matches          []*CMsgDOTAMatchMinimal `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CMsgGCToClientTopFriendMatchesResponse) Reset() {
	*m = CMsgGCToClientTopFriendMatchesResponse{}
}
func (m *CMsgGCToClientTopFriendMatchesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToClientTopFriendMatchesResponse) ProtoMessage()    {}
func (*CMsgGCToClientTopFriendMatchesResponse) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{10}
}

func (m *CMsgGCToClientTopFriendMatchesResponse) GetMatches() []*CMsgDOTAMatchMinimal {
	if m != nil {
		return m.Matches
	}
	return nil
}

type CMsgClientToGCFindTopMatches struct {
	StartGame        *uint32 `protobuf:"varint,1,opt,name=start_game,json=startGame" json:"start_game,omitempty"`
	LeagueId         *uint32 `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	HeroId           *uint32 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	FriendId         *uint32 `protobuf:"varint,4,opt,name=friend_id,json=friendId" json:"friend_id,omitempty"`
	FriendList       *bool   `protobuf:"varint,5,opt,name=friend_list,json=friendList" json:"friend_list,omitempty"`
	LeagueList       *bool   `protobuf:"varint,6,opt,name=league_list,json=leagueList" json:"league_list,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientToGCFindTopMatches) Reset()                    { *m = CMsgClientToGCFindTopMatches{} }
func (m *CMsgClientToGCFindTopMatches) String() string            { return proto.CompactTextString(m) }
func (*CMsgClientToGCFindTopMatches) ProtoMessage()               {}
func (*CMsgClientToGCFindTopMatches) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{11} }

func (m *CMsgClientToGCFindTopMatches) GetStartGame() uint32 {
	if m != nil && m.StartGame != nil {
		return *m.StartGame
	}
	return 0
}

func (m *CMsgClientToGCFindTopMatches) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgClientToGCFindTopMatches) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgClientToGCFindTopMatches) GetFriendId() uint32 {
	if m != nil && m.FriendId != nil {
		return *m.FriendId
	}
	return 0
}

func (m *CMsgClientToGCFindTopMatches) GetFriendList() bool {
	if m != nil && m.FriendList != nil {
		return *m.FriendList
	}
	return false
}

func (m *CMsgClientToGCFindTopMatches) GetLeagueList() bool {
	if m != nil && m.LeagueList != nil {
		return *m.LeagueList
	}
	return false
}

type CMsgGCToClientFindTopLeagueMatchesResponse struct {
	StartGame        *uint32                                 `protobuf:"varint,1,opt,name=start_game,json=startGame" json:"start_game,omitempty"`
	LeagueId         *uint32                                 `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	HeroId           *uint32                                 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	MatchIds         []uint32                                `protobuf:"varint,4,rep,name=match_ids,json=matchIds" json:"match_ids,omitempty"`
	Matches          []*CMsgDOTAMatch `protobuf:"bytes,5,rep,name=matches" json:"matches,omitempty"`
	XXX_unrecognized []byte                                  `json:"-"`
}

func (m *CMsgGCToClientFindTopLeagueMatchesResponse) Reset() {
	*m = CMsgGCToClientFindTopLeagueMatchesResponse{}
}
func (m *CMsgGCToClientFindTopLeagueMatchesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCToClientFindTopLeagueMatchesResponse) ProtoMessage() {}
func (*CMsgGCToClientFindTopLeagueMatchesResponse) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{12}
}

func (m *CMsgGCToClientFindTopLeagueMatchesResponse) GetStartGame() uint32 {
	if m != nil && m.StartGame != nil {
		return *m.StartGame
	}
	return 0
}

func (m *CMsgGCToClientFindTopLeagueMatchesResponse) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgGCToClientFindTopLeagueMatchesResponse) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgGCToClientFindTopLeagueMatchesResponse) GetMatchIds() []uint32 {
	if m != nil {
		return m.MatchIds
	}
	return nil
}

func (m *CMsgGCToClientFindTopLeagueMatchesResponse) GetMatches() []*CMsgDOTAMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

type CMsgSpectateFriendGame struct {
	SteamId          *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSpectateFriendGame) Reset()                    { *m = CMsgSpectateFriendGame{} }
func (m *CMsgSpectateFriendGame) String() string            { return proto.CompactTextString(m) }
func (*CMsgSpectateFriendGame) ProtoMessage()               {}
func (*CMsgSpectateFriendGame) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{13} }

func (m *CMsgSpectateFriendGame) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

type CMsgSpectateFriendGameResponse struct {
	ServerSteamid    *uint64 `protobuf:"fixed64,4,opt,name=server_steamid,json=serverSteamid" json:"server_steamid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSpectateFriendGameResponse) Reset()                    { *m = CMsgSpectateFriendGameResponse{} }
func (m *CMsgSpectateFriendGameResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgSpectateFriendGameResponse) ProtoMessage()               {}
func (*CMsgSpectateFriendGameResponse) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{14} }

func (m *CMsgSpectateFriendGameResponse) GetServerSteamid() uint64 {
	if m != nil && m.ServerSteamid != nil {
		return *m.ServerSteamid
	}
	return 0
}

type CMsgDOTAMatchMinimal struct {
	MatchId          *uint64                          `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	StartTime        *uint32                          `protobuf:"fixed32,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Duration         *uint32                          `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	GameMode         *DOTA_GameMode `protobuf:"varint,4,opt,name=game_mode,json=gameMode,enum=DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	Players          []*CMsgDOTAMatchMinimal_Player   `protobuf:"bytes,6,rep,name=players" json:"players,omitempty"`
	Tourney          *CMsgDOTAMatchMinimal_Tourney    `protobuf:"bytes,7,opt,name=tourney" json:"tourney,omitempty"`
	MatchOutcome     *EMatchOutcome `protobuf:"varint,8,opt,name=match_outcome,json=matchOutcome,enum=EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *CMsgDOTAMatchMinimal) Reset()                    { *m = CMsgDOTAMatchMinimal{} }
func (m *CMsgDOTAMatchMinimal) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAMatchMinimal) ProtoMessage()               {}
func (*CMsgDOTAMatchMinimal) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{15} }

const Default_CMsgDOTAMatchMinimal_GameMode DOTA_GameMode = DOTA_GameMode_DOTA_GAMEMODE_NONE
const Default_CMsgDOTAMatchMinimal_MatchOutcome EMatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown

func (m *CMsgDOTAMatchMinimal) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal) GetDuration() uint32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal) GetGameMode() DOTA_GameMode {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return Default_CMsgDOTAMatchMinimal_GameMode
}

func (m *CMsgDOTAMatchMinimal) GetPlayers() []*CMsgDOTAMatchMinimal_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgDOTAMatchMinimal) GetTourney() *CMsgDOTAMatchMinimal_Tourney {
	if m != nil {
		return m.Tourney
	}
	return nil
}

func (m *CMsgDOTAMatchMinimal) GetMatchOutcome() EMatchOutcome {
	if m != nil && m.MatchOutcome != nil {
		return *m.MatchOutcome
	}
	return Default_CMsgDOTAMatchMinimal_MatchOutcome
}

type CMsgDOTAMatchMinimal_Player struct {
	AccountId        *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId           *uint32  `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Kills            *uint32  `protobuf:"varint,3,opt,name=kills" json:"kills,omitempty"`
	Deaths           *uint32  `protobuf:"varint,4,opt,name=deaths" json:"deaths,omitempty"`
	Assists          *uint32  `protobuf:"varint,5,opt,name=assists" json:"assists,omitempty"`
	Items            []uint32 `protobuf:"varint,6,rep,name=items" json:"items,omitempty"`
	PlayerSlot       *uint32  `protobuf:"varint,7,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAMatchMinimal_Player) Reset()                    { *m = CMsgDOTAMatchMinimal_Player{} }
func (m *CMsgDOTAMatchMinimal_Player) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAMatchMinimal_Player) ProtoMessage()               {}
func (*CMsgDOTAMatchMinimal_Player) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{15, 0} }

func (m *CMsgDOTAMatchMinimal_Player) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Player) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Player) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Player) GetDeaths() uint32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Player) GetAssists() uint32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Player) GetItems() []uint32 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *CMsgDOTAMatchMinimal_Player) GetPlayerSlot() uint32 {
	if m != nil && m.PlayerSlot != nil {
		return *m.PlayerSlot
	}
	return 0
}

type CMsgDOTAMatchMinimal_Tourney struct {
	LeagueId                     *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	SeriesType                   *uint32 `protobuf:"varint,8,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	SeriesGame                   *uint32 `protobuf:"varint,9,opt,name=series_game,json=seriesGame" json:"series_game,omitempty"`
	WeekendTourneyTournamentId   *uint32 `protobuf:"varint,10,opt,name=weekend_tourney_tournament_id,json=weekendTourneyTournamentId" json:"weekend_tourney_tournament_id,omitempty"`
	WeekendTourneySeasonTrophyId *uint32 `protobuf:"varint,11,opt,name=weekend_tourney_season_trophy_id,json=weekendTourneySeasonTrophyId" json:"weekend_tourney_season_trophy_id,omitempty"`
	WeekendTourneyDivision       *uint32 `protobuf:"varint,12,opt,name=weekend_tourney_division,json=weekendTourneyDivision" json:"weekend_tourney_division,omitempty"`
	WeekendTourneySkillLevel     *uint32 `protobuf:"varint,13,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	RadiantTeamId                *uint32 `protobuf:"varint,2,opt,name=radiant_team_id,json=radiantTeamId" json:"radiant_team_id,omitempty"`
	RadiantTeamName              *string `protobuf:"bytes,3,opt,name=radiant_team_name,json=radiantTeamName" json:"radiant_team_name,omitempty"`
	RadiantTeamLogo              *uint64 `protobuf:"fixed64,4,opt,name=radiant_team_logo,json=radiantTeamLogo" json:"radiant_team_logo,omitempty"`
	DireTeamId                   *uint32 `protobuf:"varint,5,opt,name=dire_team_id,json=direTeamId" json:"dire_team_id,omitempty"`
	DireTeamName                 *string `protobuf:"bytes,6,opt,name=dire_team_name,json=direTeamName" json:"dire_team_name,omitempty"`
	DireTeamLogo                 *uint64 `protobuf:"fixed64,7,opt,name=dire_team_logo,json=direTeamLogo" json:"dire_team_logo,omitempty"`
	XXX_unrecognized             []byte  `json:"-"`
}

func (m *CMsgDOTAMatchMinimal_Tourney) Reset()         { *m = CMsgDOTAMatchMinimal_Tourney{} }
func (m *CMsgDOTAMatchMinimal_Tourney) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAMatchMinimal_Tourney) ProtoMessage()    {}
func (*CMsgDOTAMatchMinimal_Tourney) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{15, 1}
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetSeriesGame() uint32 {
	if m != nil && m.SeriesGame != nil {
		return *m.SeriesGame
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetWeekendTourneyTournamentId() uint32 {
	if m != nil && m.WeekendTourneyTournamentId != nil {
		return *m.WeekendTourneyTournamentId
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetWeekendTourneySeasonTrophyId() uint32 {
	if m != nil && m.WeekendTourneySeasonTrophyId != nil {
		return *m.WeekendTourneySeasonTrophyId
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetWeekendTourneyDivision() uint32 {
	if m != nil && m.WeekendTourneyDivision != nil {
		return *m.WeekendTourneyDivision
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetWeekendTourneySkillLevel() uint32 {
	if m != nil && m.WeekendTourneySkillLevel != nil {
		return *m.WeekendTourneySkillLevel
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetRadiantTeamId() uint32 {
	if m != nil && m.RadiantTeamId != nil {
		return *m.RadiantTeamId
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetRadiantTeamName() string {
	if m != nil && m.RadiantTeamName != nil {
		return *m.RadiantTeamName
	}
	return ""
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetRadiantTeamLogo() uint64 {
	if m != nil && m.RadiantTeamLogo != nil {
		return *m.RadiantTeamLogo
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetDireTeamId() uint32 {
	if m != nil && m.DireTeamId != nil {
		return *m.DireTeamId
	}
	return 0
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetDireTeamName() string {
	if m != nil && m.DireTeamName != nil {
		return *m.DireTeamName
	}
	return ""
}

func (m *CMsgDOTAMatchMinimal_Tourney) GetDireTeamLogo() uint64 {
	if m != nil && m.DireTeamLogo != nil {
		return *m.DireTeamLogo
	}
	return 0
}

type CDOTAReplayDownloadInfo struct {
	Match            *CMsgDOTAMatchMinimal `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Title            *string               `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description      *string               `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Size             *uint32               `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Tags             []string              `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	ExistsOnDisk     *bool                 `protobuf:"varint,6,opt,name=exists_on_disk,json=existsOnDisk" json:"exists_on_disk,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CDOTAReplayDownloadInfo) Reset()                    { *m = CDOTAReplayDownloadInfo{} }
func (m *CDOTAReplayDownloadInfo) String() string            { return proto.CompactTextString(m) }
func (*CDOTAReplayDownloadInfo) ProtoMessage()               {}
func (*CDOTAReplayDownloadInfo) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{16} }

func (m *CDOTAReplayDownloadInfo) GetMatch() *CMsgDOTAMatchMinimal {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *CDOTAReplayDownloadInfo) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *CDOTAReplayDownloadInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *CDOTAReplayDownloadInfo) GetSize() uint32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *CDOTAReplayDownloadInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CDOTAReplayDownloadInfo) GetExistsOnDisk() bool {
	if m != nil && m.ExistsOnDisk != nil {
		return *m.ExistsOnDisk
	}
	return false
}

type CDOTAReplayDownloadInfo_Highlight struct {
	Timestamp        *uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Description      *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CDOTAReplayDownloadInfo_Highlight) Reset()         { *m = CDOTAReplayDownloadInfo_Highlight{} }
func (m *CDOTAReplayDownloadInfo_Highlight) String() string { return proto.CompactTextString(m) }
func (*CDOTAReplayDownloadInfo_Highlight) ProtoMessage()    {}
func (*CDOTAReplayDownloadInfo_Highlight) Descriptor() ([]byte, []int) {
	return dota_gcmessages_client_watch_fileDescriptor0, []int{16, 0}
}

func (m *CDOTAReplayDownloadInfo_Highlight) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CDOTAReplayDownloadInfo_Highlight) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

type CMsgWatchGame struct {
	ServerSteamid      *uint64  `protobuf:"fixed64,1,opt,name=server_steamid,json=serverSteamid" json:"server_steamid,omitempty"`
	ClientVersion      *uint32  `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	WatchServerSteamid *uint64  `protobuf:"fixed64,3,opt,name=watch_server_steamid,json=watchServerSteamid" json:"watch_server_steamid,omitempty"`
	LobbyId            *uint64  `protobuf:"varint,4,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	Regions            []uint32 `protobuf:"varint,5,rep,name=regions" json:"regions,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *CMsgWatchGame) Reset()                    { *m = CMsgWatchGame{} }
func (m *CMsgWatchGame) String() string            { return proto.CompactTextString(m) }
func (*CMsgWatchGame) ProtoMessage()               {}
func (*CMsgWatchGame) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{17} }

func (m *CMsgWatchGame) GetServerSteamid() uint64 {
	if m != nil && m.ServerSteamid != nil {
		return *m.ServerSteamid
	}
	return 0
}

func (m *CMsgWatchGame) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgWatchGame) GetWatchServerSteamid() uint64 {
	if m != nil && m.WatchServerSteamid != nil {
		return *m.WatchServerSteamid
	}
	return 0
}

func (m *CMsgWatchGame) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgWatchGame) GetRegions() []uint32 {
	if m != nil {
		return m.Regions
	}
	return nil
}

type CMsgCancelWatchGame struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgCancelWatchGame) Reset()                    { *m = CMsgCancelWatchGame{} }
func (m *CMsgCancelWatchGame) String() string            { return proto.CompactTextString(m) }
func (*CMsgCancelWatchGame) ProtoMessage()               {}
func (*CMsgCancelWatchGame) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{18} }

type CMsgWatchGameResponse struct {
	WatchGameResult         *CMsgWatchGameResponse_WatchGameResult `protobuf:"varint,1,opt,name=watch_game_result,json=watchGameResult,enum=CMsgWatchGameResponse_WatchGameResult,def=0" json:"watch_game_result,omitempty"`
	SourceTvPublicAddr      *uint32                                `protobuf:"varint,2,opt,name=source_tv_public_addr,json=sourceTvPublicAddr" json:"source_tv_public_addr,omitempty"`
	SourceTvPrivateAddr     *uint32                                `protobuf:"varint,3,opt,name=source_tv_private_addr,json=sourceTvPrivateAddr" json:"source_tv_private_addr,omitempty"`
	SourceTvPort            *uint32                                `protobuf:"varint,4,opt,name=source_tv_port,json=sourceTvPort" json:"source_tv_port,omitempty"`
	GameServerSteamid       *uint64                                `protobuf:"fixed64,5,opt,name=game_server_steamid,json=gameServerSteamid" json:"game_server_steamid,omitempty"`
	WatchServerSteamid      *uint64                                `protobuf:"fixed64,6,opt,name=watch_server_steamid,json=watchServerSteamid" json:"watch_server_steamid,omitempty"`
	WatchTvUniqueSecretCode *uint64                                `protobuf:"fixed64,7,opt,name=watch_tv_unique_secret_code,json=watchTvUniqueSecretCode" json:"watch_tv_unique_secret_code,omitempty"`
	XXX_unrecognized        []byte                                 `json:"-"`
}

func (m *CMsgWatchGameResponse) Reset()                    { *m = CMsgWatchGameResponse{} }
func (m *CMsgWatchGameResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgWatchGameResponse) ProtoMessage()               {}
func (*CMsgWatchGameResponse) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{19} }

const Default_CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse_WatchGameResult = CMsgWatchGameResponse_PENDING

func (m *CMsgWatchGameResponse) GetWatchGameResult() CMsgWatchGameResponse_WatchGameResult {
	if m != nil && m.WatchGameResult != nil {
		return *m.WatchGameResult
	}
	return Default_CMsgWatchGameResponse_WatchGameResult
}

func (m *CMsgWatchGameResponse) GetSourceTvPublicAddr() uint32 {
	if m != nil && m.SourceTvPublicAddr != nil {
		return *m.SourceTvPublicAddr
	}
	return 0
}

func (m *CMsgWatchGameResponse) GetSourceTvPrivateAddr() uint32 {
	if m != nil && m.SourceTvPrivateAddr != nil {
		return *m.SourceTvPrivateAddr
	}
	return 0
}

func (m *CMsgWatchGameResponse) GetSourceTvPort() uint32 {
	if m != nil && m.SourceTvPort != nil {
		return *m.SourceTvPort
	}
	return 0
}

func (m *CMsgWatchGameResponse) GetGameServerSteamid() uint64 {
	if m != nil && m.GameServerSteamid != nil {
		return *m.GameServerSteamid
	}
	return 0
}

func (m *CMsgWatchGameResponse) GetWatchServerSteamid() uint64 {
	if m != nil && m.WatchServerSteamid != nil {
		return *m.WatchServerSteamid
	}
	return 0
}

func (m *CMsgWatchGameResponse) GetWatchTvUniqueSecretCode() uint64 {
	if m != nil && m.WatchTvUniqueSecretCode != nil {
		return *m.WatchTvUniqueSecretCode
	}
	return 0
}

type CMsgPartyLeaderWatchGamePrompt struct {
	GameServerSteamid *uint64 `protobuf:"fixed64,5,opt,name=game_server_steamid,json=gameServerSteamid" json:"game_server_steamid,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *CMsgPartyLeaderWatchGamePrompt) Reset()                    { *m = CMsgPartyLeaderWatchGamePrompt{} }
func (m *CMsgPartyLeaderWatchGamePrompt) String() string            { return proto.CompactTextString(m) }
func (*CMsgPartyLeaderWatchGamePrompt) ProtoMessage()               {}
func (*CMsgPartyLeaderWatchGamePrompt) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{20} }

func (m *CMsgPartyLeaderWatchGamePrompt) GetGameServerSteamid() uint64 {
	if m != nil && m.GameServerSteamid != nil {
		return *m.GameServerSteamid
	}
	return 0
}

type CDOTABroadcasterInfo struct {
	AccountId                  *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ServerSteamId              *uint64 `protobuf:"fixed64,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	Live                       *bool   `protobuf:"varint,3,opt,name=live" json:"live,omitempty"`
	TeamNameRadiant            *string `protobuf:"bytes,4,opt,name=team_name_radiant,json=teamNameRadiant" json:"team_name_radiant,omitempty"`
	TeamNameDire               *string `protobuf:"bytes,5,opt,name=team_name_dire,json=teamNameDire" json:"team_name_dire,omitempty"`
	StageName                  *string `protobuf:"bytes,6,opt,name=stage_name,json=stageName" json:"stage_name,omitempty"`
	SeriesGame                 *uint32 `protobuf:"varint,7,opt,name=series_game,json=seriesGame" json:"series_game,omitempty"`
	SeriesType                 *uint32 `protobuf:"varint,8,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	UpcomingBroadcastTimestamp *uint32 `protobuf:"varint,9,opt,name=upcoming_broadcast_timestamp,json=upcomingBroadcastTimestamp" json:"upcoming_broadcast_timestamp,omitempty"`
	AllowLiveVideo             *bool   `protobuf:"varint,10,opt,name=allow_live_video,json=allowLiveVideo" json:"allow_live_video,omitempty"`
	XXX_unrecognized           []byte  `json:"-"`
}

func (m *CDOTABroadcasterInfo) Reset()                    { *m = CDOTABroadcasterInfo{} }
func (m *CDOTABroadcasterInfo) String() string            { return proto.CompactTextString(m) }
func (*CDOTABroadcasterInfo) ProtoMessage()               {}
func (*CDOTABroadcasterInfo) Descriptor() ([]byte, []int) { return dota_gcmessages_client_watch_fileDescriptor0, []int{21} }

func (m *CDOTABroadcasterInfo) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CDOTABroadcasterInfo) GetServerSteamId() uint64 {
	if m != nil && m.ServerSteamId != nil {
		return *m.ServerSteamId
	}
	return 0
}

func (m *CDOTABroadcasterInfo) GetLive() bool {
	if m != nil && m.Live != nil {
		return *m.Live
	}
	return false
}

func (m *CDOTABroadcasterInfo) GetTeamNameRadiant() string {
	if m != nil && m.TeamNameRadiant != nil {
		return *m.TeamNameRadiant
	}
	return ""
}

func (m *CDOTABroadcasterInfo) GetTeamNameDire() string {
	if m != nil && m.TeamNameDire != nil {
		return *m.TeamNameDire
	}
	return ""
}

func (m *CDOTABroadcasterInfo) GetStageName() string {
	if m != nil && m.StageName != nil {
		return *m.StageName
	}
	return ""
}

func (m *CDOTABroadcasterInfo) GetSeriesGame() uint32 {
	if m != nil && m.SeriesGame != nil {
		return *m.SeriesGame
	}
	return 0
}

func (m *CDOTABroadcasterInfo) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CDOTABroadcasterInfo) GetUpcomingBroadcastTimestamp() uint32 {
	if m != nil && m.UpcomingBroadcastTimestamp != nil {
		return *m.UpcomingBroadcastTimestamp
	}
	return 0
}

func (m *CDOTABroadcasterInfo) GetAllowLiveVideo() bool {
	if m != nil && m.AllowLiveVideo != nil {
		return *m.AllowLiveVideo
	}
	return false
}

func init() {
	proto.RegisterType((*CSourceTVGameSmall)(nil), "CSourceTVGameSmall")
	proto.RegisterType((*CSourceTVGameSmall_Player)(nil), "CSourceTVGameSmall.Player")
	proto.RegisterType((*CMsgClientToGCFindTopSourceTVGames)(nil), "CMsgClientToGCFindTopSourceTVGames")
	proto.RegisterType((*CMsgGCToClientFindTopSourceTVGamesResponse)(nil), "CMsgGCToClientFindTopSourceTVGamesResponse")
	proto.RegisterType((*CMsgGCToClientTopWeekendTourneyGames)(nil), "CMsgGCToClientTopWeekendTourneyGames")
	proto.RegisterType((*CMsgClientToGCTopMatchesRequest)(nil), "CMsgClientToGCTopMatchesRequest")
	proto.RegisterType((*CMsgClientToGCTopLeagueMatchesRequest)(nil), "CMsgClientToGCTopLeagueMatchesRequest")
	proto.RegisterType((*CMsgClientToGCTopFriendMatchesRequest)(nil), "CMsgClientToGCTopFriendMatchesRequest")
	proto.RegisterType((*CMsgClientToGCMatchesMinimalRequest)(nil), "CMsgClientToGCMatchesMinimalRequest")
	proto.RegisterType((*CMsgClientToGCMatchesMinimalResponse)(nil), "CMsgClientToGCMatchesMinimalResponse")
	proto.RegisterType((*CMsgGCToClientTopLeagueMatchesResponse)(nil), "CMsgGCToClientTopLeagueMatchesResponse")
	proto.RegisterType((*CMsgGCToClientTopFriendMatchesResponse)(nil), "CMsgGCToClientTopFriendMatchesResponse")
	proto.RegisterType((*CMsgClientToGCFindTopMatches)(nil), "CMsgClientToGCFindTopMatches")
	proto.RegisterType((*CMsgGCToClientFindTopLeagueMatchesResponse)(nil), "CMsgGCToClientFindTopLeagueMatchesResponse")
	proto.RegisterType((*CMsgSpectateFriendGame)(nil), "CMsgSpectateFriendGame")
	proto.RegisterType((*CMsgSpectateFriendGameResponse)(nil), "CMsgSpectateFriendGameResponse")
	proto.RegisterType((*CMsgDOTAMatchMinimal)(nil), "CMsgDOTAMatchMinimal")
	proto.RegisterType((*CMsgDOTAMatchMinimal_Player)(nil), "CMsgDOTAMatchMinimal.Player")
	proto.RegisterType((*CMsgDOTAMatchMinimal_Tourney)(nil), "CMsgDOTAMatchMinimal.Tourney")
	proto.RegisterType((*CDOTAReplayDownloadInfo)(nil), "CDOTAReplayDownloadInfo")
	proto.RegisterType((*CDOTAReplayDownloadInfo_Highlight)(nil), "CDOTAReplayDownloadInfo.Highlight")
	proto.RegisterType((*CMsgWatchGame)(nil), "CMsgWatchGame")
	proto.RegisterType((*CMsgCancelWatchGame)(nil), "CMsgCancelWatchGame")
	proto.RegisterType((*CMsgWatchGameResponse)(nil), "CMsgWatchGameResponse")
	proto.RegisterType((*CMsgPartyLeaderWatchGamePrompt)(nil), "CMsgPartyLeaderWatchGamePrompt")
	proto.RegisterType((*CDOTABroadcasterInfo)(nil), "CDOTABroadcasterInfo")
	proto.RegisterEnum("CMsgWatchGameResponse_WatchGameResult", CMsgWatchGameResponse_WatchGameResult_name, CMsgWatchGameResponse_WatchGameResult_value)
}

func init() { proto.RegisterFile("dota_gcmessages_client_watch.proto", dota_gcmessages_client_watch_fileDescriptor0) }

var dota_gcmessages_client_watch_fileDescriptor0 = []byte{
	// 2216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x72, 0x23, 0x49,
	0x11, 0xde, 0xb6, 0xad, 0x9f, 0x4e, 0x5b, 0xb2, 0x5d, 0x9e, 0xb1, 0x7b, 0xfc, 0xb3, 0x23, 0xb4,
	0xb3, 0xb3, 0x8a, 0x21, 0xc2, 0x2c, 0xb3, 0x04, 0x10, 0x1b, 0x10, 0xac, 0x2c, 0x6b, 0xbc, 0x8a,
	0x95, 0x65, 0x47, 0x4b, 0xf6, 0xc6, 0xc0, 0xa1, 0xa3, 0xac, 0xae, 0x91, 0x2b, 0xdc, 0xdd, 0xa5,
	0xed, 0x2a, 0xc9, 0x6b, 0x2e, 0x70, 0xe7, 0xc2, 0x95, 0x77, 0xe0, 0x1d, 0xb8, 0x70, 0xe0, 0x0a,
	0x47, 0x22, 0xb8, 0x71, 0xe6, 0x19, 0x88, 0xca, 0xea, 0x96, 0x5b, 0x3f, 0xc6, 0xcb, 0x6e, 0x10,
	0x9c, 0xa4, 0xfa, 0xf2, 0xcb, 0xca, 0xaa, 0xac, 0xcc, 0xac, 0xac, 0x86, 0xaa, 0x2f, 0x14, 0xf5,
	0x06, 0xfd, 0x90, 0x49, 0x49, 0x07, 0x4c, 0x7a, 0xfd, 0x80, 0xb3, 0x48, 0x79, 0xb7, 0x54, 0xf5,
	0xaf, 0x0f, 0x87, 0xb1, 0x50, 0x62, 0x77, 0x07, 0x39, 0xf2, 0x9a, 0xc6, 0xcc, 0xf7, 0x58, 0x34,
	0x0a, 0x65, 0x22, 0xd8, 0x9f, 0x53, 0x16, 0x61, 0x28, 0x22, 0x23, 0xad, 0xfe, 0xb3, 0x08, 0xa4,
	0xd1, 0x15, 0xa3, 0xb8, 0xcf, 0x7a, 0x97, 0x27, 0x34, 0x64, 0xdd, 0x90, 0x06, 0x01, 0xf9, 0x00,
	0x4a, 0xb4, 0xaf, 0xf8, 0x98, 0x2a, 0xe6, 0x29, 0x1e, 0x32, 0xc7, 0xaa, 0x58, 0xb5, 0x92, 0xbb,
	0x96, 0x82, 0x3d, 0x1e, 0x32, 0xf2, 0x11, 0xac, 0xfb, 0x6c, 0x9a, 0xb6, 0x84, 0xb4, 0xf2, 0x3d,
	0x8c, 0xc4, 0x97, 0xb0, 0x2e, 0x59, 0x3c, 0x66, 0xb1, 0x27, 0x15, 0xa3, 0xa1, 0xc7, 0x7d, 0x67,
	0xb9, 0x62, 0xd5, 0x56, 0xdc, 0x92, 0x81, 0xbb, 0x1a, 0x6d, 0xf9, 0xe4, 0x19, 0x14, 0x03, 0x71,
	0x75, 0x75, 0xa7, 0x09, 0x2b, 0x48, 0x28, 0xe0, 0xb8, 0xe5, 0x93, 0x3d, 0xb0, 0x03, 0x46, 0x07,
	0x23, 0xa6, 0x65, 0x39, 0xb4, 0x52, 0x34, 0x40, 0xcb, 0x27, 0x07, 0x00, 0x46, 0x4f, 0xdd, 0x0d,
	0x99, 0x93, 0x47, 0xa9, 0x8d, 0x48, 0xef, 0x6e, 0xc8, 0xb4, 0xee, 0x80, 0x86, 0xc9, 0x0a, 0x0b,
	0x15, 0xab, 0x96, 0x73, 0x8b, 0x1a, 0xc0, 0xb5, 0x3d, 0x81, 0x9c, 0xcf, 0x02, 0x7a, 0xe7, 0x14,
	0x51, 0xcd, 0x0c, 0xc8, 0xfb, 0x00, 0x72, 0xc8, 0xfa, 0x8a, 0x2a, 0x11, 0x4b, 0xc7, 0x46, 0x51,
	0x06, 0x99, 0x4c, 0x19, 0x0a, 0x9f, 0x39, 0x60, 0x96, 0xa3, 0x81, 0x53, 0xe1, 0x33, 0xf2, 0x1c,
	0x56, 0xe9, 0x98, 0xc5, 0x74, 0xc0, 0xbc, 0x30, 0x8c, 0x9d, 0x55, 0xa3, 0x9d, 0x40, 0xa7, 0x61,
	0x4c, 0x5e, 0xc1, 0x26, 0xfa, 0x21, 0xd2, 0x53, 0xc4, 0xd4, 0xe7, 0x34, 0x52, 0xce, 0x7a, 0xc5,
	0xaa, 0xd9, 0xee, 0xba, 0x16, 0x74, 0x68, 0xc8, 0x5c, 0x03, 0x93, 0x17, 0x50, 0xbe, 0xe7, 0xfa,
	0x3c, 0x66, 0xce, 0x06, 0x12, 0xd7, 0x52, 0xe2, 0x31, 0x8f, 0xd9, 0x64, 0xc6, 0x40, 0x0c, 0xc4,
	0x64, 0x46, 0xa7, 0x62, 0xd5, 0xf2, 0x66, 0xc6, 0xb6, 0x18, 0x88, 0xd9, 0x19, 0x91, 0x8b, 0x33,
	0x3e, 0x43, 0xe2, 0x5a, 0x4a, 0xc4, 0x19, 0x0f, 0x00, 0xa4, 0x88, 0x95, 0x27, 0xfb, 0x22, 0x66,
	0xce, 0xa6, 0xf1, 0xa9, 0x46, 0xba, 0x1a, 0x20, 0x35, 0xd8, 0x08, 0xa8, 0x54, 0xde, 0x68, 0xe8,
	0x4f, 0x0e, 0x9f, 0x54, 0xac, 0xda, 0x92, 0x5b, 0xd6, 0xf8, 0x05, 0xc2, 0xe8, 0xe0, 0xef, 0xc1,
	0x5a, 0xb2, 0x20, 0x2f, 0x60, 0xd4, 0x77, 0xb6, 0xf0, 0x00, 0x56, 0x13, 0xac, 0xcd, 0xa8, 0xaf,
	0xa3, 0x2d, 0xa5, 0x18, 0x73, 0x4f, 0x4c, 0xb4, 0x25, 0xa0, 0xb1, 0x78, 0x00, 0xa0, 0x17, 0x9b,
	0x30, 0x9e, 0x9a, 0x05, 0x69, 0xc4, 0x88, 0x7f, 0x04, 0x85, 0x61, 0x40, 0xef, 0x58, 0x2c, 0x9d,
	0xed, 0xca, 0x72, 0x6d, 0xf5, 0xf5, 0xee, 0xe1, 0x7c, 0x5c, 0x1f, 0x9e, 0x23, 0xc5, 0x4d, 0xa9,
	0xe4, 0x43, 0x28, 0x5f, 0x8d, 0x78, 0xe0, 0xf3, 0x68, 0xe0, 0x49, 0x45, 0x15, 0x73, 0x76, 0x2a,
	0x56, 0xad, 0xe0, 0x96, 0x52, 0xb4, 0xab, 0x41, 0x52, 0x87, 0x83, 0x5b, 0xc6, 0x6e, 0x58, 0xe4,
	0x7b, 0x4a, 0x8c, 0xe2, 0x88, 0xdd, 0x99, 0x5f, 0x1a, 0xea, 0x34, 0xe4, 0xbe, 0xb3, 0x8b, 0xcb,
	0xd9, 0x4d, 0x48, 0x3d, 0xc3, 0xe9, 0x4d, 0x28, 0x2d, 0x9f, 0xfc, 0x14, 0x9c, 0xd9, 0x29, 0x7c,
	0x3e, 0xe6, 0x92, 0x8b, 0xc8, 0xd9, 0x43, 0xed, 0xed, 0x69, 0xed, 0xe3, 0x44, 0x4a, 0x7e, 0x0e,
	0x7b, 0xb3, 0x9a, 0xf2, 0x86, 0x07, 0x81, 0x17, 0xb0, 0x31, 0x0b, 0x9c, 0x7d, 0x54, 0x76, 0xa6,
	0x95, 0xbb, 0x9a, 0xd0, 0xd6, 0xf2, 0x45, 0x6b, 0xbf, 0x8a, 0x69, 0xff, 0x86, 0x29, 0x2f, 0x16,
	0xa3, 0xc8, 0x77, 0x0e, 0x16, 0xad, 0xfd, 0xc8, 0x50, 0x5c, 0xcd, 0xd8, 0xfd, 0x0c, 0xf2, 0xc6,
	0x71, 0xfa, 0x10, 0x68, 0xbf, 0x2f, 0x46, 0x66, 0xd7, 0xa6, 0x28, 0xd8, 0x09, 0xd2, 0xf2, 0xc9,
	0x0e, 0x14, 0xae, 0x59, 0x2c, 0xb4, 0xcc, 0x54, 0x82, 0xbc, 0x1e, 0xb6, 0xfc, 0xea, 0x3f, 0x2c,
	0xa8, 0x36, 0x4e, 0xe5, 0xa0, 0x81, 0x85, 0xab, 0x27, 0x4e, 0x1a, 0x6f, 0xb8, 0xb6, 0x35, 0xcc,
	0x1e, 0x91, 0xc4, 0xa0, 0x63, 0x34, 0xee, 0x5f, 0x7b, 0x37, 0xec, 0x0e, 0xa7, 0xb7, 0x5d, 0xdb,
	0x20, 0x5f, 0xb0, 0xbb, 0xe9, 0x22, 0xb0, 0x34, 0x53, 0x04, 0x32, 0xb6, 0x97, 0xb3, 0xb6, 0x71,
	0x52, 0x45, 0x63, 0xe5, 0xe9, 0x04, 0xc5, 0xba, 0xa2, 0x23, 0x59, 0x23, 0xda, 0xa8, 0x2e, 0x4e,
	0x98, 0xca, 0x01, 0x97, 0xca, 0xe3, 0x91, 0xcf, 0xbe, 0x4e, 0xea, 0x4b, 0x49, 0xc3, 0x6d, 0x2e,
	0x55, 0x4b, 0x83, 0x68, 0x3c, 0x29, 0x4e, 0xd2, 0xc9, 0x57, 0x96, 0x6b, 0x2b, 0x6e, 0x31, 0xa9,
	0x4e, 0xb2, 0xfa, 0xaf, 0x25, 0x78, 0xa5, 0xf7, 0x77, 0xd2, 0xe8, 0x09, 0xb3, 0xc7, 0x45, 0xfb,
	0x73, 0x99, 0x1c, 0x8a, 0x48, 0xb2, 0xff, 0xcb, 0x3e, 0xf7, 0xc0, 0x8e, 0x46, 0x21, 0x0a, 0x65,
	0x5a, 0x41, 0xa3, 0x51, 0x68, 0x1c, 0xbf, 0xc0, 0x09, 0xf9, 0x45, 0x4e, 0xf8, 0x38, 0xa9, 0x7b,
	0x9a, 0xe7, 0x14, 0x30, 0xcf, 0xb6, 0x16, 0xe4, 0x99, 0x29, 0x86, 0x5a, 0x4d, 0x67, 0x98, 0xae,
	0x9b, 0xfc, 0x1d, 0xef, 0x27, 0xb6, 0x75, 0xa1, 0x2d, 0xba, 0xa5, 0x14, 0x35, 0x0b, 0x38, 0x84,
	0xe2, 0x95, 0x48, 0x96, 0xae, 0xcb, 0xed, 0x03, 0xf3, 0x16, 0xae, 0x04, 0xee, 0xa6, 0xfa, 0x4b,
	0x78, 0x31, 0xed, 0xef, 0x9e, 0x18, 0x7e, 0x39, 0x15, 0xc1, 0x66, 0xde, 0xd7, 0x00, 0x01, 0x1f,
	0xb3, 0xc4, 0xb4, 0xf5, 0xf0, 0x8a, 0x6d, 0x4d, 0x43, 0x9d, 0xea, 0x6f, 0xe0, 0xf9, 0x74, 0xac,
	0xf6, 0xc4, 0xf0, 0x54, 0x5f, 0xb5, 0xfa, 0x04, 0xbf, 0x1a, 0x31, 0xa9, 0xb2, 0x87, 0x60, 0x4d,
	0x1d, 0xc2, 0x2b, 0xd8, 0x34, 0xb5, 0xc5, 0xcb, 0xe4, 0x89, 0x39, 0xc2, 0x75, 0x23, 0xa8, 0x67,
	0xb3, 0x25, 0x7b, 0x1d, 0x96, 0xdc, 0xbc, 0xb9, 0x07, 0xab, 0x1f, 0xc1, 0x87, 0x73, 0x0b, 0x68,
	0xe3, 0xf9, 0x4f, 0x2f, 0x63, 0x21, 0xf1, 0x4d, 0xcc, 0x59, 0xe4, 0xcf, 0x10, 0x8f, 0xe0, 0x83,
	0x69, 0x62, 0x22, 0x3f, 0xe5, 0x11, 0x0f, 0x69, 0x90, 0x6e, 0x6b, 0x0f, 0xec, 0x50, 0x0b, 0x30,
	0xc6, 0x2d, 0x13, 0xe3, 0x08, 0xe8, 0x18, 0x1f, 0x1b, 0x97, 0x3f, 0x3c, 0x47, 0x12, 0xdc, 0x3f,
	0x80, 0x42, 0x68, 0x24, 0x89, 0xbf, 0x9f, 0x1e, 0x6a, 0xbd, 0xe3, 0xb3, 0x5e, 0x1d, 0x35, 0x52,
	0x7e, 0xca, 0xc2, 0xeb, 0x5b, 0xdf, 0x25, 0x38, 0x46, 0x67, 0x15, 0x5d, 0x5b, 0x23, 0x48, 0xaf,
	0xbe, 0x85, 0x97, 0x73, 0x47, 0x3d, 0xe3, 0x8d, 0x79, 0xcb, 0x4b, 0xdf, 0xc4, 0xf2, 0xc2, 0xa9,
	0x67, 0xfc, 0xf7, 0x2d, 0x37, 0x55, 0xfd, 0x9b, 0x05, 0xfb, 0x0b, 0x2b, 0xde, 0xe9, 0xfd, 0xae,
	0x33, 0xe9, 0x6a, 0x2d, 0x48, 0xd7, 0x6f, 0x51, 0x03, 0xf6, 0xc0, 0x7e, 0x87, 0xeb, 0x4f, 0x5b,
	0xa8, 0x92, 0x5b, 0x34, 0x40, 0xcb, 0xd7, 0x7d, 0x49, 0x22, 0xc4, 0xf4, 0xcd, 0xa1, 0xa3, 0xc1,
	0x40, 0x98, 0xab, 0xcf, 0x61, 0x35, 0xb1, 0x89, 0x84, 0xbc, 0x21, 0x18, 0x48, 0x13, 0xaa, 0x7f,
	0xb1, 0x1e, 0x28, 0x73, 0x8b, 0xcf, 0xe3, 0x7f, 0xb5, 0xc5, 0xfb, 0x18, 0x5d, 0xa9, 0x2c, 0x6b,
	0xad, 0x34, 0x46, 0x49, 0xed, 0xfe, 0x98, 0x72, 0x78, 0x4c, 0xe5, 0xe9, 0x63, 0xba, 0x3f, 0x9f,
	0x4f, 0x60, 0x5b, 0x4b, 0xba, 0xa6, 0xa7, 0x63, 0xe6, 0xd4, 0x71, 0x59, 0xcf, 0xa0, 0x38, 0x69,
	0x53, 0x2d, 0xec, 0x8c, 0x0a, 0x32, 0x49, 0xcc, 0x13, 0x78, 0x7f, 0xb1, 0xd2, 0x64, 0xcb, 0xba,
	0xdc, 0x65, 0x5a, 0xdd, 0xe4, 0x14, 0xf2, 0x53, 0x9d, 0x2e, 0xf7, 0xab, 0xbf, 0xb3, 0xe1, 0xc9,
	0xa2, 0xf8, 0xd1, 0xc6, 0xd3, 0xdd, 0xa1, 0xf1, 0x95, 0x64, 0xc5, 0xd9, 0xfa, 0x3e, 0xe9, 0xb4,
	0x0b, 0x89, 0x37, 0xb1, 0xcf, 0xda, 0x85, 0xa2, 0x3f, 0x8a, 0xa9, 0xd2, 0x0d, 0x85, 0xf1, 0xd8,
	0x64, 0x4c, 0x7e, 0x91, 0x6d, 0x57, 0xf5, 0x82, 0xca, 0xaf, 0xcb, 0x87, 0xda, 0xb6, 0x77, 0x92,
	0x34, 0xad, 0x9f, 0x12, 0x33, 0xac, 0x9f, 0x36, 0x4f, 0xcf, 0x8e, 0x9b, 0x5e, 0xe7, 0xac, 0xd3,
	0xcc, 0xb4, 0xb4, 0x3f, 0xbe, 0xef, 0xae, 0xf2, 0xe8, 0xd7, 0xfd, 0x85, 0xe1, 0x3f, 0xd7, 0x5f,
	0xfd, 0x04, 0x0a, 0x49, 0xd3, 0x81, 0x8d, 0xf7, 0xea, 0xeb, 0x83, 0xc5, 0x7a, 0x49, 0xcd, 0x76,
	0x53, 0x36, 0x69, 0x43, 0xc9, 0xf8, 0x41, 0x8c, 0x54, 0x5f, 0x84, 0x0c, 0x6f, 0x0d, 0xbd, 0xea,
	0x26, 0xea, 0x9d, 0x19, 0xf4, 0xd3, 0x9d, 0x1b, 0x6f, 0x0a, 0xf0, 0x2e, 0xa2, 0x9b, 0x48, 0xdc,
	0x46, 0xee, 0x5a, 0x98, 0x41, 0x77, 0xff, 0x64, 0x7d, 0xd7, 0x0e, 0x46, 0xbf, 0x13, 0x74, 0x4f,
	0x25, 0x13, 0xdf, 0x9a, 0x01, 0xd9, 0x86, 0xbc, 0xcf, 0xa8, 0xba, 0x96, 0x49, 0xb2, 0x25, 0x23,
	0xe2, 0x40, 0x81, 0x4a, 0xc9, 0xa5, 0x4a, 0xaf, 0xda, 0x74, 0xa8, 0xe7, 0xe1, 0x8a, 0x85, 0xc6,
	0x8f, 0x25, 0xd7, 0x0c, 0x74, 0xe6, 0x25, 0xd7, 0x86, 0x0c, 0x84, 0x42, 0x5f, 0x95, 0x5c, 0x30,
	0x50, 0x37, 0x10, 0x6a, 0xf7, 0xef, 0x2b, 0x50, 0x48, 0x9c, 0x34, 0x9d, 0x37, 0xd6, 0x4c, 0xde,
	0x3c, 0x87, 0x55, 0xc9, 0x62, 0xce, 0xa4, 0x79, 0x0c, 0x15, 0x93, 0xa7, 0x0b, 0x42, 0xf8, 0x1a,
	0xba, 0x27, 0x4c, 0x2e, 0xdb, 0x09, 0x01, 0xe3, 0xff, 0xd1, 0x66, 0x17, 0x1e, 0x6d, 0x76, 0xdf,
	0x40, 0x65, 0xae, 0x65, 0x65, 0x54, 0x8a, 0xc8, 0x53, 0xb1, 0x18, 0x5e, 0xe3, 0x03, 0xcf, 0x3c,
	0x8b, 0xf6, 0x67, 0xfa, 0x56, 0x64, 0xf5, 0x90, 0xf4, 0x48, 0xd3, 0xbc, 0xf6, 0x5d, 0x9a, 0xe6,
	0xd2, 0x23, 0x4d, 0xf3, 0x4b, 0x58, 0x4f, 0x5f, 0x24, 0x69, 0x29, 0x30, 0xe1, 0x90, 0x3e, 0x54,
	0x7a, 0xe6, 0xc5, 0xfa, 0x0a, 0x36, 0xa7, 0x78, 0xda, 0x03, 0x18, 0x21, 0xb6, 0xbb, 0x9e, 0x61,
	0xea, 0x77, 0xda, 0x1c, 0x57, 0xbf, 0xbf, 0x92, 0xea, 0x90, 0xe5, 0xea, 0x17, 0x18, 0xa9, 0xc0,
	0x1a, 0x3e, 0x76, 0x52, 0xe3, 0x26, 0x88, 0xf0, 0x01, 0x94, 0x58, 0x7e, 0x01, 0xe5, 0x7b, 0x06,
	0x9a, 0xcd, 0x9b, 0x77, 0x61, 0xca, 0x41, 0x9b, 0x53, 0x2c, 0x34, 0x58, 0x30, 0x6f, 0xbd, 0x94,
	0xa5, 0xad, 0x55, 0xff, 0xb0, 0x04, 0x3b, 0x0d, 0x9d, 0x93, 0x2e, 0xd3, 0x21, 0x77, 0x2c, 0x6e,
	0xa3, 0x40, 0x50, 0xbf, 0x15, 0xbd, 0x13, 0xe4, 0xfb, 0x90, 0x33, 0xf7, 0xb2, 0x85, 0xf9, 0xfb,
	0xc0, 0xb5, 0x67, 0x38, 0x3a, 0xb8, 0x15, 0x57, 0x81, 0xa9, 0x4e, 0xb6, 0x6b, 0x06, 0xa4, 0x02,
	0xab, 0x3e, 0x93, 0xfd, 0x98, 0x0f, 0x27, 0xc5, 0xc9, 0x76, 0xb3, 0x10, 0x21, 0xb0, 0x22, 0xf9,
	0xaf, 0xd3, 0xa6, 0x15, 0xff, 0x6b, 0x4c, 0xd1, 0x81, 0xa9, 0xe3, 0xb6, 0x8b, 0xff, 0xf5, 0x76,
	0xd8, 0xd7, 0x3a, 0x8d, 0x3c, 0x11, 0x79, 0x3e, 0x97, 0x37, 0xc9, 0x1d, 0xb5, 0x66, 0xd0, 0xb3,
	0xe8, 0x98, 0xcb, 0x9b, 0xdd, 0x2f, 0xc0, 0xfe, 0x9c, 0x0f, 0xae, 0x03, 0x3e, 0xb8, 0x56, 0x64,
	0x1f, 0x6c, 0x5d, 0x2f, 0xa5, 0xa2, 0xe1, 0x30, 0x4d, 0xf7, 0x09, 0x30, 0xbb, 0xb4, 0xa5, 0xb9,
	0xa5, 0x55, 0xff, 0x6c, 0x41, 0x49, 0x6f, 0xf9, 0x4b, 0xbd, 0x41, 0xcc, 0x8f, 0xf9, 0x12, 0x6f,
	0x2d, 0x28, 0xf1, 0x9a, 0x96, 0x7c, 0xa6, 0x19, 0xb3, 0x58, 0xa6, 0xb3, 0x97, 0xdc, 0x92, 0x41,
	0x2f, 0x0d, 0x48, 0x3e, 0x86, 0x27, 0xf8, 0x19, 0xc7, 0x9b, 0x99, 0x73, 0x19, 0xe7, 0x24, 0x28,
	0xeb, 0x4e, 0x4d, 0xfc, 0x1f, 0xbe, 0x92, 0x38, 0x50, 0x88, 0xd9, 0x80, 0x8b, 0xc8, 0xb8, 0xad,
	0xe4, 0xa6, 0xc3, 0xea, 0x53, 0xd8, 0xc2, 0x6e, 0x84, 0x46, 0x7d, 0x16, 0x4c, 0xf6, 0x52, 0xfd,
	0xeb, 0x0a, 0x3c, 0x9d, 0xda, 0xdd, 0xe4, 0x22, 0xfb, 0x15, 0x6c, 0x9a, 0x75, 0xe1, 0xc5, 0x11,
	0x33, 0x39, 0x0a, 0x14, 0x6e, 0xb4, 0xfc, 0xfa, 0xe5, 0xe1, 0x42, 0x95, 0xc3, 0x2c, 0x32, 0x0a,
	0xd4, 0xa7, 0x85, 0xf3, 0x66, 0xe7, 0xb8, 0xd5, 0x39, 0x71, 0xd7, 0x6f, 0xa7, 0x25, 0xe4, 0x87,
	0xf0, 0x54, 0x62, 0x07, 0xee, 0xa9, 0xb1, 0x37, 0x1c, 0x5d, 0x05, 0xbc, 0xef, 0x51, 0xdf, 0x8f,
	0x13, 0x17, 0x11, 0x23, 0xec, 0x8d, 0xcf, 0x51, 0x54, 0xf7, 0xfd, 0x98, 0x7c, 0x02, 0xdb, 0x19,
	0x95, 0xd8, 0x7c, 0x73, 0x42, 0x1d, 0x53, 0x90, 0xb7, 0x26, 0x3a, 0x46, 0x86, 0x4a, 0x2f, 0xa0,
	0x9c, 0x51, 0x12, 0xb1, 0x4a, 0x22, 0x6c, 0x6d, 0x42, 0x16, 0xb1, 0x22, 0x87, 0xb0, 0x85, 0x9b,
	0x9c, 0x39, 0x81, 0x1c, 0x9e, 0xc0, 0xa6, 0x16, 0x4d, 0x1f, 0xc0, 0x43, 0x47, 0x96, 0x7f, 0xf0,
	0xc8, 0x7e, 0x06, 0x7b, 0x46, 0x43, 0x8d, 0xbd, 0x51, 0xc4, 0xbf, 0x1a, 0x69, 0x63, 0xfd, 0x98,
	0x29, 0xaf, 0xaf, 0x6f, 0x64, 0x93, 0x93, 0x3b, 0x48, 0xe9, 0x8d, 0x2f, 0x90, 0xd0, 0x45, 0x79,
	0x43, 0xf8, 0xac, 0xfa, 0x47, 0x0b, 0xd6, 0x67, 0x7c, 0x4b, 0x56, 0x21, 0xf5, 0xee, 0xc6, 0x7b,
	0xc4, 0x86, 0x9c, 0xdb, 0xac, 0x1f, 0xbf, 0xdd, 0xb0, 0xc8, 0x36, 0x10, 0x7d, 0x87, 0x77, 0x9b,
	0xee, 0x65, 0xd3, 0xed, 0x9c, 0xf5, 0xde, 0x9c, 0x5d, 0x74, 0x8e, 0x37, 0x96, 0xc8, 0x3a, 0xac,
	0x5e, 0x74, 0xea, 0x97, 0xf5, 0x56, 0xbb, 0x7e, 0xd4, 0x6e, 0x6e, 0x2c, 0x93, 0x12, 0xd8, 0x8d,
	0x7a, 0xa7, 0xd1, 0x6c, 0xb7, 0x9b, 0xc7, 0x1b, 0x2b, 0x64, 0x07, 0xb6, 0x5a, 0x9d, 0xc6, 0xd9,
	0xe9, 0x79, 0xbd, 0xd7, 0x3a, 0x6a, 0x37, 0x2f, 0x9b, 0x6e, 0xb7, 0x75, 0xd6, 0xd9, 0xc8, 0x91,
	0x03, 0x78, 0x76, 0xda, 0xea, 0x76, 0x5b, 0x9d, 0x93, 0x76, 0xb3, 0x7e, 0x72, 0xd1, 0xec, 0x5e,
	0x1c, 0x75, 0x1b, 0x6e, 0xeb, 0xbc, 0xa7, 0xc5, 0x79, 0xb2, 0x09, 0xa5, 0xf6, 0xd9, 0xd1, 0xd1,
	0xdb, 0x89, 0xa9, 0x42, 0xf5, 0xdc, 0x34, 0x49, 0xe7, 0x34, 0x56, 0x77, 0x6d, 0x46, 0x7d, 0x16,
	0x4f, 0x16, 0x7f, 0x1e, 0x8b, 0x70, 0xf8, 0x5f, 0x3b, 0xbc, 0xfa, 0xfb, 0x65, 0x78, 0x82, 0xf5,
	0xe9, 0x28, 0x16, 0xd4, 0xef, 0x53, 0xa9, 0x58, 0x8c, 0xc5, 0xe9, 0x91, 0xcb, 0x7c, 0xc1, 0x77,
	0xc7, 0xa5, 0xb9, 0x54, 0x6d, 0xf9, 0xba, 0xd4, 0xe8, 0xd7, 0x1f, 0x46, 0x52, 0xd1, 0xc5, 0xff,
	0x8b, 0xbf, 0xd1, 0xad, 0x7c, 0xd3, 0x6f, 0x74, 0xb9, 0x05, 0xdf, 0xe8, 0x4c, 0xff, 0x36, 0x60,
	0xd9, 0x6a, 0x6d, 0x23, 0x82, 0xa5, 0x7a, 0xe6, 0x5e, 0x2e, 0xcc, 0xdd, 0xcb, 0x8f, 0xde, 0xec,
	0x9f, 0xc1, 0xfe, 0x68, 0xd8, 0x17, 0x21, 0x8f, 0x06, 0xde, 0x55, 0xea, 0x29, 0xef, 0xbe, 0xfa,
	0x99, 0xab, 0x7e, 0x37, 0xe5, 0x4c, 0x9c, 0xd9, 0x9b, 0x94, 0xc3, 0x1a, 0x6c, 0xd0, 0x20, 0x10,
	0xb7, 0x1e, 0xbe, 0x99, 0xc7, 0xdc, 0x67, 0x02, 0x6f, 0xfb, 0xa2, 0x5b, 0x46, 0xbc, 0xcd, 0xc7,
	0xec, 0x52, 0xa3, 0x47, 0xb9, 0xcf, 0xad, 0xdf, 0x5a, 0xef, 0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x6a, 0x08, 0x16, 0x6a, 0x9a, 0x16, 0x00, 0x00,
}
