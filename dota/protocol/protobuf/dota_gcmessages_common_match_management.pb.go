// Code generated by protoc-gen-go.
// source: dota_gcmessages_common_match_management.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package protobuf is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package protobuf to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LobbyDotaTVDelay int32

const (
	LobbyDotaTVDelay_LobbyDotaTV_10  LobbyDotaTVDelay = 0
	LobbyDotaTVDelay_LobbyDotaTV_120 LobbyDotaTVDelay = 1
	LobbyDotaTVDelay_LobbyDotaTV_300 LobbyDotaTVDelay = 2
)

var LobbyDotaTVDelay_name = map[int32]string{
	0: "LobbyDotaTV_10",
	1: "LobbyDotaTV_120",
	2: "LobbyDotaTV_300",
}
var LobbyDotaTVDelay_value = map[string]int32{
	"LobbyDotaTV_10":  0,
	"LobbyDotaTV_120": 1,
	"LobbyDotaTV_300": 2,
}

func (x LobbyDotaTVDelay) Enum() *LobbyDotaTVDelay {
	p := new(LobbyDotaTVDelay)
	*p = x
	return p
}
func (x LobbyDotaTVDelay) String() string {
	return proto.EnumName(LobbyDotaTVDelay_name, int32(x))
}
func (x *LobbyDotaTVDelay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LobbyDotaTVDelay_value, data, "LobbyDotaTVDelay")
	if err != nil {
		return err
	}
	*x = LobbyDotaTVDelay(value)
	return nil
}
func (LobbyDotaTVDelay) EnumDescriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{0} }

type LobbyDotaPauseSetting int32

const (
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited LobbyDotaPauseSetting = 0
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Limited   LobbyDotaPauseSetting = 1
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Disabled  LobbyDotaPauseSetting = 2
)

var LobbyDotaPauseSetting_name = map[int32]string{
	0: "LobbyDotaPauseSetting_Unlimited",
	1: "LobbyDotaPauseSetting_Limited",
	2: "LobbyDotaPauseSetting_Disabled",
}
var LobbyDotaPauseSetting_value = map[string]int32{
	"LobbyDotaPauseSetting_Unlimited": 0,
	"LobbyDotaPauseSetting_Limited":   1,
	"LobbyDotaPauseSetting_Disabled":  2,
}

func (x LobbyDotaPauseSetting) Enum() *LobbyDotaPauseSetting {
	p := new(LobbyDotaPauseSetting)
	*p = x
	return p
}
func (x LobbyDotaPauseSetting) String() string {
	return proto.EnumName(LobbyDotaPauseSetting_name, int32(x))
}
func (x *LobbyDotaPauseSetting) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LobbyDotaPauseSetting_value, data, "LobbyDotaPauseSetting")
	if err != nil {
		return err
	}
	*x = LobbyDotaPauseSetting(value)
	return nil
}
func (LobbyDotaPauseSetting) EnumDescriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{1} }

type CSODOTAParty_State int32

const (
	CSODOTAParty_UI            CSODOTAParty_State = 0
	CSODOTAParty_FINDING_MATCH CSODOTAParty_State = 1
	CSODOTAParty_IN_MATCH      CSODOTAParty_State = 2
)

var CSODOTAParty_State_name = map[int32]string{
	0: "UI",
	1: "FINDING_MATCH",
	2: "IN_MATCH",
}
var CSODOTAParty_State_value = map[string]int32{
	"UI":            0,
	"FINDING_MATCH": 1,
	"IN_MATCH":      2,
}

func (x CSODOTAParty_State) Enum() *CSODOTAParty_State {
	p := new(CSODOTAParty_State)
	*p = x
	return p
}
func (x CSODOTAParty_State) String() string {
	return proto.EnumName(CSODOTAParty_State_name, int32(x))
}
func (x *CSODOTAParty_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTAParty_State_value, data, "CSODOTAParty_State")
	if err != nil {
		return err
	}
	*x = CSODOTAParty_State(value)
	return nil
}
func (CSODOTAParty_State) EnumDescriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{1, 0} }

type CSODOTALobby_State int32

const (
	CSODOTALobby_UI           CSODOTALobby_State = 0
	CSODOTALobby_READYUP      CSODOTALobby_State = 4
	CSODOTALobby_SERVERSETUP  CSODOTALobby_State = 1
	CSODOTALobby_RUN          CSODOTALobby_State = 2
	CSODOTALobby_POSTGAME     CSODOTALobby_State = 3
	CSODOTALobby_NOTREADY     CSODOTALobby_State = 5
	CSODOTALobby_SERVERASSIGN CSODOTALobby_State = 6
)

var CSODOTALobby_State_name = map[int32]string{
	0: "UI",
	4: "READYUP",
	1: "SERVERSETUP",
	2: "RUN",
	3: "POSTGAME",
	5: "NOTREADY",
	6: "SERVERASSIGN",
}
var CSODOTALobby_State_value = map[string]int32{
	"UI":           0,
	"READYUP":      4,
	"SERVERSETUP":  1,
	"RUN":          2,
	"POSTGAME":     3,
	"NOTREADY":     5,
	"SERVERASSIGN": 6,
}

func (x CSODOTALobby_State) Enum() *CSODOTALobby_State {
	p := new(CSODOTALobby_State)
	*p = x
	return p
}
func (x CSODOTALobby_State) String() string {
	return proto.EnumName(CSODOTALobby_State_name, int32(x))
}
func (x *CSODOTALobby_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_State_value, data, "CSODOTALobby_State")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_State(value)
	return nil
}
func (CSODOTALobby_State) EnumDescriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{9, 0} }

type CSODOTALobby_LobbyType int32

const (
	CSODOTALobby_INVALID                 CSODOTALobby_LobbyType = -1
	CSODOTALobby_CASUAL_MATCH            CSODOTALobby_LobbyType = 0
	CSODOTALobby_PRACTICE                CSODOTALobby_LobbyType = 1
	CSODOTALobby_TOURNAMENT              CSODOTALobby_LobbyType = 2
	CSODOTALobby_COOP_BOT_MATCH          CSODOTALobby_LobbyType = 4
	CSODOTALobby_LEGACY_TEAM_MATCH       CSODOTALobby_LobbyType = 5
	CSODOTALobby_LEGACY_SOLO_QUEUE_MATCH CSODOTALobby_LobbyType = 6
	CSODOTALobby_COMPETITIVE_MATCH       CSODOTALobby_LobbyType = 7
	CSODOTALobby_CASUAL_1V1_MATCH        CSODOTALobby_LobbyType = 8
	CSODOTALobby_WEEKEND_TOURNEY         CSODOTALobby_LobbyType = 9
	CSODOTALobby_LOCAL_BOT_MATCH         CSODOTALobby_LobbyType = 10
	CSODOTALobby_SPECTATOR               CSODOTALobby_LobbyType = 11
)

var CSODOTALobby_LobbyType_name = map[int32]string{
	-1: "INVALID",
	0:  "CASUAL_MATCH",
	1:  "PRACTICE",
	2:  "TOURNAMENT",
	4:  "COOP_BOT_MATCH",
	5:  "LEGACY_TEAM_MATCH",
	6:  "LEGACY_SOLO_QUEUE_MATCH",
	7:  "COMPETITIVE_MATCH",
	8:  "CASUAL_1V1_MATCH",
	9:  "WEEKEND_TOURNEY",
	10: "LOCAL_BOT_MATCH",
	11: "SPECTATOR",
}
var CSODOTALobby_LobbyType_value = map[string]int32{
	"INVALID":                 -1,
	"CASUAL_MATCH":            0,
	"PRACTICE":                1,
	"TOURNAMENT":              2,
	"COOP_BOT_MATCH":          4,
	"LEGACY_TEAM_MATCH":       5,
	"LEGACY_SOLO_QUEUE_MATCH": 6,
	"COMPETITIVE_MATCH":       7,
	"CASUAL_1V1_MATCH":        8,
	"WEEKEND_TOURNEY":         9,
	"LOCAL_BOT_MATCH":         10,
	"SPECTATOR":               11,
}

func (x CSODOTALobby_LobbyType) Enum() *CSODOTALobby_LobbyType {
	p := new(CSODOTALobby_LobbyType)
	*p = x
	return p
}
func (x CSODOTALobby_LobbyType) String() string {
	return proto.EnumName(CSODOTALobby_LobbyType_name, int32(x))
}
func (x *CSODOTALobby_LobbyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_LobbyType_value, data, "CSODOTALobby_LobbyType")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_LobbyType(value)
	return nil
}
func (CSODOTALobby_LobbyType) EnumDescriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{9, 1} }

type CSODOTAPartyMember struct {
	PartnerType             *PartnerAccountType `protobuf:"varint,1,opt,name=partner_type,json=partnerType,enum=PartnerAccountType,def=0" json:"partner_type,omitempty"`
	IsCoach                 *bool                                `protobuf:"varint,2,opt,name=is_coach,json=isCoach" json:"is_coach,omitempty"`
	RegionPingCodes         []uint32                             `protobuf:"varint,4,rep,packed,name=region_ping_codes,json=regionPingCodes" json:"region_ping_codes,omitempty"`
	RegionPingTimes         []uint32                             `protobuf:"varint,5,rep,packed,name=region_ping_times,json=regionPingTimes" json:"region_ping_times,omitempty"`
	RegionPingFailedBitmask *uint32                              `protobuf:"varint,6,opt,name=region_ping_failed_bitmask,json=regionPingFailedBitmask" json:"region_ping_failed_bitmask,omitempty"`
	TourneySkillLevel       *uint32                              `protobuf:"varint,7,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyBuyin            *uint32                              `protobuf:"varint,8,opt,name=tourney_buyin,json=tourneyBuyin" json:"tourney_buyin,omitempty"`
	TourneyPreventUntil     *uint32                              `protobuf:"varint,9,opt,name=tourney_prevent_until,json=tourneyPreventUntil" json:"tourney_prevent_until,omitempty"`
	XXX_unrecognized        []byte                               `json:"-"`
}

func (m *CSODOTAPartyMember) Reset()                    { *m = CSODOTAPartyMember{} }
func (m *CSODOTAPartyMember) String() string            { return proto.CompactTextString(m) }
func (*CSODOTAPartyMember) ProtoMessage()               {}
func (*CSODOTAPartyMember) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{0} }

const Default_CSODOTAPartyMember_PartnerType PartnerAccountType = PartnerAccountType_PARTNER_NONE

func (m *CSODOTAPartyMember) GetPartnerType() PartnerAccountType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return Default_CSODOTAPartyMember_PartnerType
}

func (m *CSODOTAPartyMember) GetIsCoach() bool {
	if m != nil && m.IsCoach != nil {
		return *m.IsCoach
	}
	return false
}

func (m *CSODOTAPartyMember) GetRegionPingCodes() []uint32 {
	if m != nil {
		return m.RegionPingCodes
	}
	return nil
}

func (m *CSODOTAPartyMember) GetRegionPingTimes() []uint32 {
	if m != nil {
		return m.RegionPingTimes
	}
	return nil
}

func (m *CSODOTAPartyMember) GetRegionPingFailedBitmask() uint32 {
	if m != nil && m.RegionPingFailedBitmask != nil {
		return *m.RegionPingFailedBitmask
	}
	return 0
}

func (m *CSODOTAPartyMember) GetTourneySkillLevel() uint32 {
	if m != nil && m.TourneySkillLevel != nil {
		return *m.TourneySkillLevel
	}
	return 0
}

func (m *CSODOTAPartyMember) GetTourneyBuyin() uint32 {
	if m != nil && m.TourneyBuyin != nil {
		return *m.TourneyBuyin
	}
	return 0
}

func (m *CSODOTAPartyMember) GetTourneyPreventUntil() uint32 {
	if m != nil && m.TourneyPreventUntil != nil {
		return *m.TourneyPreventUntil
	}
	return 0
}

type CSODOTAParty struct {
	PartyId                         *uint64                                       `protobuf:"varint,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	LeaderId                        *uint64                                       `protobuf:"fixed64,2,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	MemberIds                       []uint64                                      `protobuf:"fixed64,3,rep,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
	GameModes                       *uint32                                       `protobuf:"varint,4,opt,name=game_modes,json=gameModes" json:"game_modes,omitempty"`
	State                           *CSODOTAParty_State                           `protobuf:"varint,6,opt,name=state,enum=CSODOTAParty_State,def=0" json:"state,omitempty"`
	EffectiveStartedMatchmakingTime *uint32                                       `protobuf:"varint,7,opt,name=effective_started_matchmaking_time,json=effectiveStartedMatchmakingTime" json:"effective_started_matchmaking_time,omitempty"`
	RawStartedMatchmakingTime       *uint32                                       `protobuf:"varint,32,opt,name=raw_started_matchmaking_time,json=rawStartedMatchmakingTime" json:"raw_started_matchmaking_time,omitempty"`
	AttemptStartTime                *uint32                                       `protobuf:"varint,33,opt,name=attempt_start_time,json=attemptStartTime" json:"attempt_start_time,omitempty"`
	AttemptNum                      *uint32                                       `protobuf:"varint,34,opt,name=attempt_num,json=attemptNum" json:"attempt_num,omitempty"`
	Matchgroups                     *uint32                                       `protobuf:"varint,11,opt,name=matchgroups" json:"matchgroups,omitempty"`
	LowPriorityAccountId            *uint32                                       `protobuf:"varint,19,opt,name=low_priority_account_id,json=lowPriorityAccountId" json:"low_priority_account_id,omitempty"`
	MatchType                       *MatchType                  `protobuf:"varint,21,opt,name=match_type,json=matchType,enum=MatchType,def=0" json:"match_type,omitempty"`
	BotDifficulty                   *DOTABotDifficulty          `protobuf:"varint,22,opt,name=bot_difficulty,json=botDifficulty,enum=DOTABotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	TeamId                          *uint32                                       `protobuf:"varint,23,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName                        *string                                       `protobuf:"bytes,51,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamUiLogo                      *uint64                                       `protobuf:"varint,52,opt,name=team_ui_logo,json=teamUiLogo" json:"team_ui_logo,omitempty"`
	TeamBaseLogo                    *uint64                                       `protobuf:"varint,53,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	MatchDisabledUntilDate          *uint32                                       `protobuf:"varint,24,opt,name=match_disabled_until_date,json=matchDisabledUntilDate" json:"match_disabled_until_date,omitempty"`
	MatchDisabledAccountId          *uint32                                       `protobuf:"varint,25,opt,name=match_disabled_account_id,json=matchDisabledAccountId" json:"match_disabled_account_id,omitempty"`
	MatchmakingMaxRangeMinutes      *uint32                                       `protobuf:"varint,26,opt,name=matchmaking_max_range_minutes,json=matchmakingMaxRangeMinutes" json:"matchmaking_max_range_minutes,omitempty"`
	Matchlanguages                  *uint32                                       `protobuf:"varint,27,opt,name=matchlanguages" json:"matchlanguages,omitempty"`
	Members                         []*CSODOTAPartyMember                         `protobuf:"bytes,29,rep,name=members" json:"members,omitempty"`
	OpenGuildId                     *uint32                                       `protobuf:"varint,30,opt,name=open_guild_id,json=openGuildId" json:"open_guild_id,omitempty"`
	CommonGuilds                    []uint32                                      `protobuf:"varint,31,rep,name=common_guilds,json=commonGuilds" json:"common_guilds,omitempty"`
	LowPriorityGamesRemaining       *uint32                                       `protobuf:"varint,35,opt,name=low_priority_games_remaining,json=lowPriorityGamesRemaining" json:"low_priority_games_remaining,omitempty"`
	OpenForJoinRequests             *bool                                         `protobuf:"varint,40,opt,name=open_for_join_requests,json=openForJoinRequests" json:"open_for_join_requests,omitempty"`
	SentInvites                     []*CSODOTAPartyInvite                         `protobuf:"bytes,41,rep,name=sent_invites,json=sentInvites" json:"sent_invites,omitempty"`
	RecvInvites                     []*CSODOTAPartyInvite                         `protobuf:"bytes,42,rep,name=recv_invites,json=recvInvites" json:"recv_invites,omitempty"`
	AccountFlags                    *uint32                                       `protobuf:"varint,43,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	RegionSelectFlags               *uint32                                       `protobuf:"varint,44,opt,name=region_select_flags,json=regionSelectFlags" json:"region_select_flags,omitempty"`
	ExclusiveTournamentId           *uint32                                       `protobuf:"varint,45,opt,name=exclusive_tournament_id,json=exclusiveTournamentId" json:"exclusive_tournament_id,omitempty"`
	TourneyDivisionId               *uint32                                       `protobuf:"varint,47,opt,name=tourney_division_id,json=tourneyDivisionId" json:"tourney_division_id,omitempty"`
	TourneyScheduleTime             *uint32                                       `protobuf:"varint,48,opt,name=tourney_schedule_time,json=tourneyScheduleTime" json:"tourney_schedule_time,omitempty"`
	TourneySkillLevel               *uint32                                       `protobuf:"varint,49,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyBracketRound             *uint32                                       `protobuf:"varint,50,opt,name=tourney_bracket_round,json=tourneyBracketRound" json:"tourney_bracket_round,omitempty"`
	TourneyQueueDeadlineTime        *uint32                                       `protobuf:"varint,54,opt,name=tourney_queue_deadline_time,json=tourneyQueueDeadlineTime" json:"tourney_queue_deadline_time,omitempty"`
	TourneyQueueDeadlineState       *ETourneyQueueDeadlineState `protobuf:"varint,55,opt,name=tourney_queue_deadline_state,json=tourneyQueueDeadlineState,enum=ETourneyQueueDeadlineState,def=0" json:"tourney_queue_deadline_state,omitempty"`
	PartyBuilderSlotsToFill         *uint32                                       `protobuf:"varint,56,opt,name=party_builder_slots_to_fill,json=partyBuilderSlotsToFill" json:"party_builder_slots_to_fill,omitempty"`
	PartyBuilderMatchGroups         *uint32                                       `protobuf:"varint,57,opt,name=party_builder_match_groups,json=partyBuilderMatchGroups" json:"party_builder_match_groups,omitempty"`
	PartyBuilderStartTime           *uint32                                       `protobuf:"varint,58,opt,name=party_builder_start_time,json=partyBuilderStartTime" json:"party_builder_start_time,omitempty"`
	SoloQueue                       *bool                                         `protobuf:"varint,59,opt,name=solo_queue,json=soloQueue" json:"solo_queue,omitempty"`
	BotScriptIndex                  *uint32                                       `protobuf:"varint,60,opt,name=bot_script_index,json=botScriptIndex" json:"bot_script_index,omitempty"`
	SteamClanAccountId              *uint32                                       `protobuf:"varint,61,opt,name=steam_clan_account_id,json=steamClanAccountId" json:"steam_clan_account_id,omitempty"`
	XXX_unrecognized                []byte                                        `json:"-"`
}

func (m *CSODOTAParty) Reset()                    { *m = CSODOTAParty{} }
func (m *CSODOTAParty) String() string            { return proto.CompactTextString(m) }
func (*CSODOTAParty) ProtoMessage()               {}
func (*CSODOTAParty) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{1} }

const Default_CSODOTAParty_State CSODOTAParty_State = CSODOTAParty_UI
const Default_CSODOTAParty_MatchType MatchType = MatchType_MATCH_TYPE_CASUAL
const Default_CSODOTAParty_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
const Default_CSODOTAParty_TourneyQueueDeadlineState ETourneyQueueDeadlineState = ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_Normal

func (m *CSODOTAParty) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CSODOTAParty) GetLeaderId() uint64 {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return 0
}

func (m *CSODOTAParty) GetMemberIds() []uint64 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

func (m *CSODOTAParty) GetGameModes() uint32 {
	if m != nil && m.GameModes != nil {
		return *m.GameModes
	}
	return 0
}

func (m *CSODOTAParty) GetState() CSODOTAParty_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CSODOTAParty_State
}

func (m *CSODOTAParty) GetEffectiveStartedMatchmakingTime() uint32 {
	if m != nil && m.EffectiveStartedMatchmakingTime != nil {
		return *m.EffectiveStartedMatchmakingTime
	}
	return 0
}

func (m *CSODOTAParty) GetRawStartedMatchmakingTime() uint32 {
	if m != nil && m.RawStartedMatchmakingTime != nil {
		return *m.RawStartedMatchmakingTime
	}
	return 0
}

func (m *CSODOTAParty) GetAttemptStartTime() uint32 {
	if m != nil && m.AttemptStartTime != nil {
		return *m.AttemptStartTime
	}
	return 0
}

func (m *CSODOTAParty) GetAttemptNum() uint32 {
	if m != nil && m.AttemptNum != nil {
		return *m.AttemptNum
	}
	return 0
}

func (m *CSODOTAParty) GetMatchgroups() uint32 {
	if m != nil && m.Matchgroups != nil {
		return *m.Matchgroups
	}
	return 0
}

func (m *CSODOTAParty) GetLowPriorityAccountId() uint32 {
	if m != nil && m.LowPriorityAccountId != nil {
		return *m.LowPriorityAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return Default_CSODOTAParty_MatchType
}

func (m *CSODOTAParty) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CSODOTAParty_BotDifficulty
}

func (m *CSODOTAParty) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CSODOTAParty) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CSODOTAParty) GetTeamUiLogo() uint64 {
	if m != nil && m.TeamUiLogo != nil {
		return *m.TeamUiLogo
	}
	return 0
}

func (m *CSODOTAParty) GetTeamBaseLogo() uint64 {
	if m != nil && m.TeamBaseLogo != nil {
		return *m.TeamBaseLogo
	}
	return 0
}

func (m *CSODOTAParty) GetMatchDisabledUntilDate() uint32 {
	if m != nil && m.MatchDisabledUntilDate != nil {
		return *m.MatchDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAParty) GetMatchDisabledAccountId() uint32 {
	if m != nil && m.MatchDisabledAccountId != nil {
		return *m.MatchDisabledAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchmakingMaxRangeMinutes() uint32 {
	if m != nil && m.MatchmakingMaxRangeMinutes != nil {
		return *m.MatchmakingMaxRangeMinutes
	}
	return 0
}

func (m *CSODOTAParty) GetMatchlanguages() uint32 {
	if m != nil && m.Matchlanguages != nil {
		return *m.Matchlanguages
	}
	return 0
}

func (m *CSODOTAParty) GetMembers() []*CSODOTAPartyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTAParty) GetOpenGuildId() uint32 {
	if m != nil && m.OpenGuildId != nil {
		return *m.OpenGuildId
	}
	return 0
}

func (m *CSODOTAParty) GetCommonGuilds() []uint32 {
	if m != nil {
		return m.CommonGuilds
	}
	return nil
}

func (m *CSODOTAParty) GetLowPriorityGamesRemaining() uint32 {
	if m != nil && m.LowPriorityGamesRemaining != nil {
		return *m.LowPriorityGamesRemaining
	}
	return 0
}

func (m *CSODOTAParty) GetOpenForJoinRequests() bool {
	if m != nil && m.OpenForJoinRequests != nil {
		return *m.OpenForJoinRequests
	}
	return false
}

func (m *CSODOTAParty) GetSentInvites() []*CSODOTAPartyInvite {
	if m != nil {
		return m.SentInvites
	}
	return nil
}

func (m *CSODOTAParty) GetRecvInvites() []*CSODOTAPartyInvite {
	if m != nil {
		return m.RecvInvites
	}
	return nil
}

func (m *CSODOTAParty) GetAccountFlags() uint32 {
	if m != nil && m.AccountFlags != nil {
		return *m.AccountFlags
	}
	return 0
}

func (m *CSODOTAParty) GetRegionSelectFlags() uint32 {
	if m != nil && m.RegionSelectFlags != nil {
		return *m.RegionSelectFlags
	}
	return 0
}

func (m *CSODOTAParty) GetExclusiveTournamentId() uint32 {
	if m != nil && m.ExclusiveTournamentId != nil {
		return *m.ExclusiveTournamentId
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyDivisionId() uint32 {
	if m != nil && m.TourneyDivisionId != nil {
		return *m.TourneyDivisionId
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyScheduleTime() uint32 {
	if m != nil && m.TourneyScheduleTime != nil {
		return *m.TourneyScheduleTime
	}
	return 0
}

func (m *CSODOTAParty) GetTourneySkillLevel() uint32 {
	if m != nil && m.TourneySkillLevel != nil {
		return *m.TourneySkillLevel
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyBracketRound() uint32 {
	if m != nil && m.TourneyBracketRound != nil {
		return *m.TourneyBracketRound
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyQueueDeadlineTime() uint32 {
	if m != nil && m.TourneyQueueDeadlineTime != nil {
		return *m.TourneyQueueDeadlineTime
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyQueueDeadlineState() ETourneyQueueDeadlineState {
	if m != nil && m.TourneyQueueDeadlineState != nil {
		return *m.TourneyQueueDeadlineState
	}
	return Default_CSODOTAParty_TourneyQueueDeadlineState
}

func (m *CSODOTAParty) GetPartyBuilderSlotsToFill() uint32 {
	if m != nil && m.PartyBuilderSlotsToFill != nil {
		return *m.PartyBuilderSlotsToFill
	}
	return 0
}

func (m *CSODOTAParty) GetPartyBuilderMatchGroups() uint32 {
	if m != nil && m.PartyBuilderMatchGroups != nil {
		return *m.PartyBuilderMatchGroups
	}
	return 0
}

func (m *CSODOTAParty) GetPartyBuilderStartTime() uint32 {
	if m != nil && m.PartyBuilderStartTime != nil {
		return *m.PartyBuilderStartTime
	}
	return 0
}

func (m *CSODOTAParty) GetSoloQueue() bool {
	if m != nil && m.SoloQueue != nil {
		return *m.SoloQueue
	}
	return false
}

func (m *CSODOTAParty) GetBotScriptIndex() uint32 {
	if m != nil && m.BotScriptIndex != nil {
		return *m.BotScriptIndex
	}
	return 0
}

func (m *CSODOTAParty) GetSteamClanAccountId() uint32 {
	if m != nil && m.SteamClanAccountId != nil {
		return *m.SteamClanAccountId
	}
	return 0
}

type CSODOTAPartyInvite struct {
	GroupId           *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId          *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName        *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members           []*CSODOTAPartyInvite_PartyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	TeamId            *uint32                           `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	LowPriorityStatus *bool                             `protobuf:"varint,6,opt,name=low_priority_status,json=lowPriorityStatus" json:"low_priority_status,omitempty"`
	AsCoach           *bool                             `protobuf:"varint,7,opt,name=as_coach,json=asCoach" json:"as_coach,omitempty"`
	InviteGid         *uint64                           `protobuf:"fixed64,8,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
	XXX_unrecognized  []byte                            `json:"-"`
}

func (m *CSODOTAPartyInvite) Reset()                    { *m = CSODOTAPartyInvite{} }
func (m *CSODOTAPartyInvite) String() string            { return proto.CompactTextString(m) }
func (*CSODOTAPartyInvite) ProtoMessage()               {}
func (*CSODOTAPartyInvite) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{2} }

func (m *CSODOTAPartyInvite) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetSenderId() uint64 {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *CSODOTAPartyInvite) GetMembers() []*CSODOTAPartyInvite_PartyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTAPartyInvite) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetLowPriorityStatus() bool {
	if m != nil && m.LowPriorityStatus != nil {
		return *m.LowPriorityStatus
	}
	return false
}

func (m *CSODOTAPartyInvite) GetAsCoach() bool {
	if m != nil && m.AsCoach != nil {
		return *m.AsCoach
	}
	return false
}

func (m *CSODOTAPartyInvite) GetInviteGid() uint64 {
	if m != nil && m.InviteGid != nil {
		return *m.InviteGid
	}
	return 0
}

type CSODOTAPartyInvite_PartyMember struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId          *uint64 `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	IsCoach          *bool   `protobuf:"varint,4,opt,name=is_coach,json=isCoach" json:"is_coach,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSODOTAPartyInvite_PartyMember) Reset()         { *m = CSODOTAPartyInvite_PartyMember{} }
func (m *CSODOTAPartyInvite_PartyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPartyInvite_PartyMember) ProtoMessage()    {}
func (*CSODOTAPartyInvite_PartyMember) Descriptor() ([]byte, []int) {
	return dota_gcmessages_common_match_management_fileDescriptor0, []int{2, 0}
}

func (m *CSODOTAPartyInvite_PartyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTAPartyInvite_PartyMember) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

func (m *CSODOTAPartyInvite_PartyMember) GetIsCoach() bool {
	if m != nil && m.IsCoach != nil {
		return *m.IsCoach
	}
	return false
}

type CSODOTALobbyInvite struct {
	GroupId             *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId            *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName          *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members             []*CSODOTALobbyInvite_LobbyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	CustomGameId        *uint64                           `protobuf:"varint,5,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	InviteGid           *uint64                           `protobuf:"fixed64,6,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
	CustomGameCrc       *uint64                           `protobuf:"fixed64,7,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp *uint32                           `protobuf:"fixed32,8,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	XXX_unrecognized    []byte                            `json:"-"`
}

func (m *CSODOTALobbyInvite) Reset()                    { *m = CSODOTALobbyInvite{} }
func (m *CSODOTALobbyInvite) String() string            { return proto.CompactTextString(m) }
func (*CSODOTALobbyInvite) ProtoMessage()               {}
func (*CSODOTALobbyInvite) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{3} }

func (m *CSODOTALobbyInvite) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetSenderId() uint64 {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *CSODOTALobbyInvite) GetMembers() []*CSODOTALobbyInvite_LobbyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTALobbyInvite) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetInviteGid() uint64 {
	if m != nil && m.InviteGid != nil {
		return *m.InviteGid
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

type CSODOTALobbyInvite_LobbyMember struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId          *uint64 `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSODOTALobbyInvite_LobbyMember) Reset()         { *m = CSODOTALobbyInvite_LobbyMember{} }
func (m *CSODOTALobbyInvite_LobbyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobbyInvite_LobbyMember) ProtoMessage()    {}
func (*CSODOTALobbyInvite_LobbyMember) Descriptor() ([]byte, []int) {
	return dota_gcmessages_common_match_management_fileDescriptor0, []int{3, 0}
}

func (m *CSODOTALobbyInvite_LobbyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTALobbyInvite_LobbyMember) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

type CMsgLeaverState struct {
	LobbyState          *uint32                           `protobuf:"varint,1,opt,name=lobby_state,json=lobbyState" json:"lobby_state,omitempty"`
	GameState           *DOTA_GameState `protobuf:"varint,2,opt,name=game_state,json=gameState,enum=DOTA_GameState,def=0" json:"game_state,omitempty"`
	LeaverDetected      *bool                             `protobuf:"varint,3,opt,name=leaver_detected,json=leaverDetected" json:"leaver_detected,omitempty"`
	FirstBloodHappened  *bool                             `protobuf:"varint,4,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	DiscardMatchResults *bool                             `protobuf:"varint,5,opt,name=discard_match_results,json=discardMatchResults" json:"discard_match_results,omitempty"`
	MassDisconnect      *bool                             `protobuf:"varint,6,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
	XXX_unrecognized    []byte                            `json:"-"`
}

func (m *CMsgLeaverState) Reset()                    { *m = CMsgLeaverState{} }
func (m *CMsgLeaverState) String() string            { return proto.CompactTextString(m) }
func (*CMsgLeaverState) ProtoMessage()               {}
func (*CMsgLeaverState) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{4} }

const Default_CMsgLeaverState_GameState DOTA_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT

func (m *CMsgLeaverState) GetLobbyState() uint32 {
	if m != nil && m.LobbyState != nil {
		return *m.LobbyState
	}
	return 0
}

func (m *CMsgLeaverState) GetGameState() DOTA_GameState {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return Default_CMsgLeaverState_GameState
}

func (m *CMsgLeaverState) GetLeaverDetected() bool {
	if m != nil && m.LeaverDetected != nil {
		return *m.LeaverDetected
	}
	return false
}

func (m *CMsgLeaverState) GetFirstBloodHappened() bool {
	if m != nil && m.FirstBloodHappened != nil {
		return *m.FirstBloodHappened
	}
	return false
}

func (m *CMsgLeaverState) GetDiscardMatchResults() bool {
	if m != nil && m.DiscardMatchResults != nil {
		return *m.DiscardMatchResults
	}
	return false
}

func (m *CMsgLeaverState) GetMassDisconnect() bool {
	if m != nil && m.MassDisconnect != nil {
		return *m.MassDisconnect
	}
	return false
}

type CDOTALobbyMember struct {
	Id                    *uint64                                     `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	HeroId                *uint32                                     `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Team                  *DOTA_GC_TEAM             `protobuf:"varint,3,opt,name=team,enum=DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name                  *string                                     `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Slot                  *uint32                                     `protobuf:"varint,7,opt,name=slot" json:"slot,omitempty"`
	PartyId               *uint64                                     `protobuf:"varint,12,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	MetaLevel             *uint32                                     `protobuf:"varint,13,opt,name=meta_level,json=metaLevel" json:"meta_level,omitempty"`
	MetaXp                *uint32                                     `protobuf:"varint,14,opt,name=meta_xp,json=metaXp" json:"meta_xp,omitempty"`
	MetaXpAwarded         *uint32                                     `protobuf:"varint,15,opt,name=meta_xp_awarded,json=metaXpAwarded" json:"meta_xp_awarded,omitempty"`
	LeaverStatus          *DOTALeaverStatusT        `protobuf:"varint,16,opt,name=leaver_status,json=leaverStatus,enum=DOTALeaverStatusT,def=0" json:"leaver_status,omitempty"`
	LeaverActions         *uint32                                     `protobuf:"varint,28,opt,name=leaver_actions,json=leaverActions" json:"leaver_actions,omitempty"`
	Channel               *uint32                                     `protobuf:"varint,17,opt,name=channel" json:"channel,omitempty"`
	PrizeDefIndex         *uint32                                     `protobuf:"varint,18,opt,name=prize_def_index,json=prizeDefIndex" json:"prize_def_index,omitempty"`
	DisabledHeroId        []uint32                                    `protobuf:"varint,20,rep,name=disabled_hero_id,json=disabledHeroId" json:"disabled_hero_id,omitempty"`
	PartnerAccountType    *PartnerAccountType        `protobuf:"varint,21,opt,name=partner_account_type,json=partnerAccountType,enum=PartnerAccountType,def=0" json:"partner_account_type,omitempty"`
	EnabledHeroId         []uint32                                    `protobuf:"varint,22,rep,name=enabled_hero_id,json=enabledHeroId" json:"enabled_hero_id,omitempty"`
	CoachTeam             *DOTA_GC_TEAM             `protobuf:"varint,23,opt,name=coach_team,json=coachTeam,enum=DOTA_GC_TEAM,def=5" json:"coach_team,omitempty"`
	NexonPcBangNo         *uint32                                     `protobuf:"varint,24,opt,name=nexon_pc_bang_no,json=nexonPcBangNo" json:"nexon_pc_bang_no,omitempty"`
	NexonPcBangName       *string                                     `protobuf:"bytes,25,opt,name=nexon_pc_bang_name,json=nexonPcBangName" json:"nexon_pc_bang_name,omitempty"`
	XpBonuses             []*CDOTALobbyMember_CDOTALobbyMemberXPBonus `protobuf:"bytes,27,rep,name=xp_bonuses,json=xpBonuses" json:"xp_bonuses,omitempty"`
	RankChange            *int32                                      `protobuf:"zigzag32,29,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	Cameraman             *bool                                       `protobuf:"varint,30,opt,name=cameraman" json:"cameraman,omitempty"`
	CustomGameProductIds  []uint32                                    `protobuf:"varint,31,rep,name=custom_game_product_ids,json=customGameProductIds" json:"custom_game_product_ids,omitempty"`
	LobbyMvpVoteAccountId *uint32                                     `protobuf:"varint,32,opt,name=lobby_mvp_vote_account_id,json=lobbyMvpVoteAccountId" json:"lobby_mvp_vote_account_id,omitempty"`
	SearchMatchType       *MatchType                `protobuf:"varint,33,opt,name=search_match_type,json=searchMatchType,enum=MatchType,def=0" json:"search_match_type,omitempty"`
	FavoriteTeamPacked    *uint64                                     `protobuf:"varint,35,opt,name=favorite_team_packed,json=favoriteTeamPacked" json:"favorite_team_packed,omitempty"`
	IsPrimeSubscriber     *bool                                       `protobuf:"varint,36,opt,name=is_prime_subscriber,json=isPrimeSubscriber" json:"is_prime_subscriber,omitempty"`
	RankTier              *int32                                      `protobuf:"zigzag32,37,opt,name=rank_tier,json=rankTier" json:"rank_tier,omitempty"`
	XXX_unrecognized      []byte                                      `json:"-"`
}

func (m *CDOTALobbyMember) Reset()                    { *m = CDOTALobbyMember{} }
func (m *CDOTALobbyMember) String() string            { return proto.CompactTextString(m) }
func (*CDOTALobbyMember) ProtoMessage()               {}
func (*CDOTALobbyMember) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{5} }

const Default_CDOTALobbyMember_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
const Default_CDOTALobbyMember_LeaverStatus DOTALeaverStatusT = DOTALeaverStatusT_DOTA_LEAVER_NONE
const Default_CDOTALobbyMember_PartnerAccountType PartnerAccountType = PartnerAccountType_PARTNER_NONE
const Default_CDOTALobbyMember_CoachTeam DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
const Default_CDOTALobbyMember_SearchMatchType MatchType = MatchType_MATCH_TYPE_CASUAL

func (m *CDOTALobbyMember) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CDOTALobbyMember) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CDOTALobbyMember) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CDOTALobbyMember_Team
}

func (m *CDOTALobbyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CDOTALobbyMember) GetSlot() uint32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *CDOTALobbyMember) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaLevel() uint32 {
	if m != nil && m.MetaLevel != nil {
		return *m.MetaLevel
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaXp() uint32 {
	if m != nil && m.MetaXp != nil {
		return *m.MetaXp
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaXpAwarded() uint32 {
	if m != nil && m.MetaXpAwarded != nil {
		return *m.MetaXpAwarded
	}
	return 0
}

func (m *CDOTALobbyMember) GetLeaverStatus() DOTALeaverStatusT {
	if m != nil && m.LeaverStatus != nil {
		return *m.LeaverStatus
	}
	return Default_CDOTALobbyMember_LeaverStatus
}

func (m *CDOTALobbyMember) GetLeaverActions() uint32 {
	if m != nil && m.LeaverActions != nil {
		return *m.LeaverActions
	}
	return 0
}

func (m *CDOTALobbyMember) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *CDOTALobbyMember) GetPrizeDefIndex() uint32 {
	if m != nil && m.PrizeDefIndex != nil {
		return *m.PrizeDefIndex
	}
	return 0
}

func (m *CDOTALobbyMember) GetDisabledHeroId() []uint32 {
	if m != nil {
		return m.DisabledHeroId
	}
	return nil
}

func (m *CDOTALobbyMember) GetPartnerAccountType() PartnerAccountType {
	if m != nil && m.PartnerAccountType != nil {
		return *m.PartnerAccountType
	}
	return Default_CDOTALobbyMember_PartnerAccountType
}

func (m *CDOTALobbyMember) GetEnabledHeroId() []uint32 {
	if m != nil {
		return m.EnabledHeroId
	}
	return nil
}

func (m *CDOTALobbyMember) GetCoachTeam() DOTA_GC_TEAM {
	if m != nil && m.CoachTeam != nil {
		return *m.CoachTeam
	}
	return Default_CDOTALobbyMember_CoachTeam
}

func (m *CDOTALobbyMember) GetNexonPcBangNo() uint32 {
	if m != nil && m.NexonPcBangNo != nil {
		return *m.NexonPcBangNo
	}
	return 0
}

func (m *CDOTALobbyMember) GetNexonPcBangName() string {
	if m != nil && m.NexonPcBangName != nil {
		return *m.NexonPcBangName
	}
	return ""
}

func (m *CDOTALobbyMember) GetXpBonuses() []*CDOTALobbyMember_CDOTALobbyMemberXPBonus {
	if m != nil {
		return m.XpBonuses
	}
	return nil
}

func (m *CDOTALobbyMember) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

func (m *CDOTALobbyMember) GetCameraman() bool {
	if m != nil && m.Cameraman != nil {
		return *m.Cameraman
	}
	return false
}

func (m *CDOTALobbyMember) GetCustomGameProductIds() []uint32 {
	if m != nil {
		return m.CustomGameProductIds
	}
	return nil
}

func (m *CDOTALobbyMember) GetLobbyMvpVoteAccountId() uint32 {
	if m != nil && m.LobbyMvpVoteAccountId != nil {
		return *m.LobbyMvpVoteAccountId
	}
	return 0
}

func (m *CDOTALobbyMember) GetSearchMatchType() MatchType {
	if m != nil && m.SearchMatchType != nil {
		return *m.SearchMatchType
	}
	return Default_CDOTALobbyMember_SearchMatchType
}

func (m *CDOTALobbyMember) GetFavoriteTeamPacked() uint64 {
	if m != nil && m.FavoriteTeamPacked != nil {
		return *m.FavoriteTeamPacked
	}
	return 0
}

func (m *CDOTALobbyMember) GetIsPrimeSubscriber() bool {
	if m != nil && m.IsPrimeSubscriber != nil {
		return *m.IsPrimeSubscriber
	}
	return false
}

func (m *CDOTALobbyMember) GetRankTier() int32 {
	if m != nil && m.RankTier != nil {
		return *m.RankTier
	}
	return 0
}

type CDOTALobbyMember_CDOTALobbyMemberXPBonus struct {
	Type             *uint32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	XpBonus          *float32 `protobuf:"fixed32,2,opt,name=xp_bonus,json=xpBonus" json:"xp_bonus,omitempty"`
	SourceKey        *uint64  `protobuf:"varint,3,opt,name=source_key,json=sourceKey" json:"source_key,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) Reset() {
	*m = CDOTALobbyMember_CDOTALobbyMemberXPBonus{}
}
func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) String() string { return proto.CompactTextString(m) }
func (*CDOTALobbyMember_CDOTALobbyMemberXPBonus) ProtoMessage()    {}
func (*CDOTALobbyMember_CDOTALobbyMemberXPBonus) Descriptor() ([]byte, []int) {
	return dota_gcmessages_common_match_management_fileDescriptor0, []int{5, 0}
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetXpBonus() float32 {
	if m != nil && m.XpBonus != nil {
		return *m.XpBonus
	}
	return 0
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetSourceKey() uint64 {
	if m != nil && m.SourceKey != nil {
		return *m.SourceKey
	}
	return 0
}

type CLobbyTeamDetails struct {
	TeamName         *string `protobuf:"bytes,1,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag          *string `protobuf:"bytes,3,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamId           *uint32 `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamLogo         *uint64 `protobuf:"varint,5,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamBaseLogo     *uint64 `protobuf:"varint,6,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	TeamBannerLogo   *uint64 `protobuf:"varint,7,opt,name=team_banner_logo,json=teamBannerLogo" json:"team_banner_logo,omitempty"`
	TeamComplete     *bool   `protobuf:"varint,8,opt,name=team_complete,json=teamComplete" json:"team_complete,omitempty"`
	GuildName        *string `protobuf:"bytes,9,opt,name=guild_name,json=guildName" json:"guild_name,omitempty"`
	GuildTag         *string `protobuf:"bytes,10,opt,name=guild_tag,json=guildTag" json:"guild_tag,omitempty"`
	GuildId          *uint32 `protobuf:"varint,11,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	GuildLogo        *uint64 `protobuf:"varint,12,opt,name=guild_logo,json=guildLogo" json:"guild_logo,omitempty"`
	GuildBaseLogo    *uint64 `protobuf:"varint,13,opt,name=guild_base_logo,json=guildBaseLogo" json:"guild_base_logo,omitempty"`
	GuildBannerLogo  *uint64 `protobuf:"varint,14,opt,name=guild_banner_logo,json=guildBannerLogo" json:"guild_banner_logo,omitempty"`
	Rank             *uint32 `protobuf:"varint,15,opt,name=rank" json:"rank,omitempty"`
	RankChange       *int32  `protobuf:"zigzag32,16,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	IsHomeTeam       *bool   `protobuf:"varint,17,opt,name=is_home_team,json=isHomeTeam" json:"is_home_team,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CLobbyTeamDetails) Reset()                    { *m = CLobbyTeamDetails{} }
func (m *CLobbyTeamDetails) String() string            { return proto.CompactTextString(m) }
func (*CLobbyTeamDetails) ProtoMessage()               {}
func (*CLobbyTeamDetails) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{6} }

func (m *CLobbyTeamDetails) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBaseLogo() uint64 {
	if m != nil && m.TeamBaseLogo != nil {
		return *m.TeamBaseLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBannerLogo() uint64 {
	if m != nil && m.TeamBannerLogo != nil {
		return *m.TeamBannerLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamComplete() bool {
	if m != nil && m.TeamComplete != nil {
		return *m.TeamComplete
	}
	return false
}

func (m *CLobbyTeamDetails) GetGuildName() string {
	if m != nil && m.GuildName != nil {
		return *m.GuildName
	}
	return ""
}

func (m *CLobbyTeamDetails) GetGuildTag() string {
	if m != nil && m.GuildTag != nil {
		return *m.GuildTag
	}
	return ""
}

func (m *CLobbyTeamDetails) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildLogo() uint64 {
	if m != nil && m.GuildLogo != nil {
		return *m.GuildLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildBaseLogo() uint64 {
	if m != nil && m.GuildBaseLogo != nil {
		return *m.GuildBaseLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildBannerLogo() uint64 {
	if m != nil && m.GuildBannerLogo != nil {
		return *m.GuildBannerLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *CLobbyTeamDetails) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

func (m *CLobbyTeamDetails) GetIsHomeTeam() bool {
	if m != nil && m.IsHomeTeam != nil {
		return *m.IsHomeTeam
	}
	return false
}

type CLobbyTimedRewardDetails struct {
	ItemDefIndex     *uint32 `protobuf:"varint,2,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	IsSupplyCrate    *bool   `protobuf:"varint,3,opt,name=is_supply_crate,json=isSupplyCrate" json:"is_supply_crate,omitempty"`
	IsTimedDrop      *bool   `protobuf:"varint,4,opt,name=is_timed_drop,json=isTimedDrop" json:"is_timed_drop,omitempty"`
	AccountId        *uint32 `protobuf:"varint,5,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Origin           *uint32 `protobuf:"varint,6,opt,name=origin" json:"origin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CLobbyTimedRewardDetails) Reset()                    { *m = CLobbyTimedRewardDetails{} }
func (m *CLobbyTimedRewardDetails) String() string            { return proto.CompactTextString(m) }
func (*CLobbyTimedRewardDetails) ProtoMessage()               {}
func (*CLobbyTimedRewardDetails) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{7} }

func (m *CLobbyTimedRewardDetails) GetItemDefIndex() uint32 {
	if m != nil && m.ItemDefIndex != nil {
		return *m.ItemDefIndex
	}
	return 0
}

func (m *CLobbyTimedRewardDetails) GetIsSupplyCrate() bool {
	if m != nil && m.IsSupplyCrate != nil {
		return *m.IsSupplyCrate
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetIsTimedDrop() bool {
	if m != nil && m.IsTimedDrop != nil {
		return *m.IsTimedDrop
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CLobbyTimedRewardDetails) GetOrigin() uint32 {
	if m != nil && m.Origin != nil {
		return *m.Origin
	}
	return 0
}

type CLobbyBroadcastChannelInfo struct {
	ChannelId        *uint32 `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	CountryCode      *string `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description      *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	LanguageCode     *string `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CLobbyBroadcastChannelInfo) Reset()                    { *m = CLobbyBroadcastChannelInfo{} }
func (m *CLobbyBroadcastChannelInfo) String() string            { return proto.CompactTextString(m) }
func (*CLobbyBroadcastChannelInfo) ProtoMessage()               {}
func (*CLobbyBroadcastChannelInfo) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{8} }

func (m *CLobbyBroadcastChannelInfo) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *CLobbyBroadcastChannelInfo) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CLobbyBroadcastChannelInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *CLobbyBroadcastChannelInfo) GetLanguageCode() string {
	if m != nil && m.LanguageCode != nil {
		return *m.LanguageCode
	}
	return ""
}

type CSODOTALobby struct {
	LobbyId                                    *uint64                                        `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	Members                                    []*CDOTALobbyMember                            `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	LeftMembers                                []*CDOTALobbyMember                            `protobuf:"bytes,7,rep,name=left_members,json=leftMembers" json:"left_members,omitempty"`
	LeaderId                                   *uint64                                        `protobuf:"fixed64,11,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	ServerId                                   *uint64                                        `protobuf:"fixed64,6,opt,name=server_id,json=serverId,def=0" json:"server_id,omitempty"`
	GameMode                                   *uint32                                        `protobuf:"varint,3,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	PendingInvites                             []uint64                                       `protobuf:"fixed64,10,rep,name=pending_invites,json=pendingInvites" json:"pending_invites,omitempty"`
	State                                      *CSODOTALobby_State                            `protobuf:"varint,4,opt,name=state,enum=CSODOTALobby_State,def=0" json:"state,omitempty"`
	Connect                                    *string                                        `protobuf:"bytes,5,opt,name=connect" json:"connect,omitempty"`
	LobbyType                                  *CSODOTALobby_LobbyType                        `protobuf:"varint,12,opt,name=lobby_type,json=lobbyType,enum=CSODOTALobby_LobbyType,def=-1" json:"lobby_type,omitempty"`
	AllowCheats                                *bool                                          `protobuf:"varint,13,opt,name=allow_cheats,json=allowCheats" json:"allow_cheats,omitempty"`
	FillWithBots                               *bool                                          `protobuf:"varint,14,opt,name=fill_with_bots,json=fillWithBots" json:"fill_with_bots,omitempty"`
	IntroMode                                  *bool                                          `protobuf:"varint,15,opt,name=intro_mode,json=introMode" json:"intro_mode,omitempty"`
	GameName                                   *string                                        `protobuf:"bytes,16,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	TeamDetails                                []*CLobbyTeamDetails                           `protobuf:"bytes,17,rep,name=team_details,json=teamDetails" json:"team_details,omitempty"`
	TutorialLesson                             *uint32                                        `protobuf:"varint,18,opt,name=tutorial_lesson,json=tutorialLesson" json:"tutorial_lesson,omitempty"`
	TournamentId                               *uint32                                        `protobuf:"varint,19,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentGameId                           *uint32                                        `protobuf:"varint,20,opt,name=tournament_game_id,json=tournamentGameId" json:"tournament_game_id,omitempty"`
	ServerRegion                               *uint32                                        `protobuf:"varint,21,opt,name=server_region,json=serverRegion,def=0" json:"server_region,omitempty"`
	GameState                                  *DOTA_GameState              `protobuf:"varint,22,opt,name=game_state,json=gameState,enum=DOTA_GameState,def=0" json:"game_state,omitempty"`
	NumSpectators                              *uint32                                        `protobuf:"varint,23,opt,name=num_spectators,json=numSpectators" json:"num_spectators,omitempty"`
	Matchgroup                                 *uint32                                        `protobuf:"varint,25,opt,name=matchgroup" json:"matchgroup,omitempty"`
	CmPick                                     *DOTA_CM_PICK                `protobuf:"varint,28,opt,name=cm_pick,json=cmPick,enum=DOTA_CM_PICK,def=0" json:"cm_pick,omitempty"`
	MatchId                                    *uint64                                        `protobuf:"varint,30,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	AllowSpectating                            *bool                                          `protobuf:"varint,31,opt,name=allow_spectating,json=allowSpectating,def=1" json:"allow_spectating,omitempty"`
	BotDifficultyRadiant                       *DOTABotDifficulty           `protobuf:"varint,36,opt,name=bot_difficulty_radiant,json=botDifficultyRadiant,enum=DOTABotDifficulty,def=3" json:"bot_difficulty_radiant,omitempty"`
	GameVersion                                *DOTAGameVersion             `protobuf:"varint,37,opt,name=game_version,json=gameVersion,enum=DOTAGameVersion,def=0" json:"game_version,omitempty"`
	TimedRewardDetails                         []*CLobbyTimedRewardDetails                    `protobuf:"bytes,38,rep,name=timed_reward_details,json=timedRewardDetails" json:"timed_reward_details,omitempty"`
	PassKey                                    *string                                        `protobuf:"bytes,39,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	Leagueid                                   *uint32                                        `protobuf:"varint,42,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant                        *uint32                                        `protobuf:"varint,43,opt,name=penalty_level_radiant,json=penaltyLevelRadiant,def=0" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire                           *uint32                                        `protobuf:"varint,44,opt,name=penalty_level_dire,json=penaltyLevelDire,def=0" json:"penalty_level_dire,omitempty"`
	LoadGameId                                 *uint32                                        `protobuf:"varint,45,opt,name=load_game_id,json=loadGameId" json:"load_game_id,omitempty"`
	SeriesType                                 *uint32                                        `protobuf:"varint,46,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	RadiantSeriesWins                          *uint32                                        `protobuf:"varint,47,opt,name=radiant_series_wins,json=radiantSeriesWins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins                             *uint32                                        `protobuf:"varint,48,opt,name=dire_series_wins,json=direSeriesWins" json:"dire_series_wins,omitempty"`
	LootGenerated                              *uint32                                        `protobuf:"varint,49,opt,name=loot_generated,json=lootGenerated" json:"loot_generated,omitempty"`
	LootAwarded                                *uint32                                        `protobuf:"varint,50,opt,name=loot_awarded,json=lootAwarded" json:"loot_awarded,omitempty"`
	Allchat                                    *bool                                          `protobuf:"varint,51,opt,name=allchat,def=0" json:"allchat,omitempty"`
	DotaTvDelay                                *LobbyDotaTVDelay                              `protobuf:"varint,53,opt,name=dota_tv_delay,json=dotaTvDelay,enum=LobbyDotaTVDelay,def=0" json:"dota_tv_delay,omitempty"`
	CustomGameMode                             *string                                        `protobuf:"bytes,54,opt,name=custom_game_mode,json=customGameMode" json:"custom_game_mode,omitempty"`
	CustomMapName                              *string                                        `protobuf:"bytes,55,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	CustomDifficulty                           *uint32                                        `protobuf:"varint,56,opt,name=custom_difficulty,json=customDifficulty" json:"custom_difficulty,omitempty"`
	Lan                                        *bool                                          `protobuf:"varint,57,opt,name=lan" json:"lan,omitempty"`
	BroadcastChannelInfo                       []*CLobbyBroadcastChannelInfo                  `protobuf:"bytes,58,rep,name=broadcast_channel_info,json=broadcastChannelInfo" json:"broadcast_channel_info,omitempty"`
	FirstLeaverAccountid                       *uint32                                        `protobuf:"varint,59,opt,name=first_leaver_accountid,json=firstLeaverAccountid" json:"first_leaver_accountid,omitempty"`
	SeriesId                                   *uint32                                        `protobuf:"varint,60,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	LowPriority                                *bool                                          `protobuf:"varint,61,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	ExtraMessages                              []*CSODOTALobby_CExtraMsg                      `protobuf:"bytes,62,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	SaveGame                                   *CDOTASaveGame               `protobuf:"bytes,63,opt,name=save_game,json=saveGame" json:"save_game,omitempty"`
	FirstBloodHappened                         *bool                                          `protobuf:"varint,65,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	MatchOutcome                               *EMatchOutcome               `protobuf:"varint,70,opt,name=match_outcome,json=matchOutcome,enum=EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	MassDisconnect                             *bool                                          `protobuf:"varint,67,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
	CustomGameId                               *uint64                                        `protobuf:"varint,68,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	CustomMinPlayers                           *uint32                                        `protobuf:"varint,71,opt,name=custom_min_players,json=customMinPlayers" json:"custom_min_players,omitempty"`
	CustomMaxPlayers                           *uint32                                        `protobuf:"varint,72,opt,name=custom_max_players,json=customMaxPlayers" json:"custom_max_players,omitempty"`
	PartnerType                                *PartnerAccountType           `protobuf:"varint,73,opt,name=partner_type,json=partnerType,enum=PartnerAccountType,def=0" json:"partner_type,omitempty"`
	LanHostPingToServerRegion                  *uint32                                        `protobuf:"varint,74,opt,name=lan_host_ping_to_server_region,json=lanHostPingToServerRegion" json:"lan_host_ping_to_server_region,omitempty"`
	Visibility                                 *DOTALobbyVisibility         `protobuf:"varint,75,opt,name=visibility,enum=DOTALobbyVisibility,def=0" json:"visibility,omitempty"`
	CustomGameCrc                              *uint64                                        `protobuf:"fixed64,76,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameAutoCreatedLobby                 *bool                                          `protobuf:"varint,77,opt,name=custom_game_auto_created_lobby,json=customGameAutoCreatedLobby" json:"custom_game_auto_created_lobby,omitempty"`
	LeagueSeriesId                             *uint32                                        `protobuf:"varint,78,opt,name=league_series_id,json=leagueSeriesId" json:"league_series_id,omitempty"`
	LeagueGameId                               *uint32                                        `protobuf:"varint,79,opt,name=league_game_id,json=leagueGameId" json:"league_game_id,omitempty"`
	CustomGameTimestamp                        *uint32                                        `protobuf:"fixed32,80,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	PreviousSeriesMatches                      []uint64                                       `protobuf:"varint,81,rep,name=previous_series_matches,json=previousSeriesMatches" json:"previous_series_matches,omitempty"`
	PreviousMatchOverride                      *uint64                                        `protobuf:"varint,82,opt,name=previous_match_override,json=previousMatchOverride" json:"previous_match_override,omitempty"`
	CustomGameUsesAccountRecords               *bool                                          `protobuf:"varint,83,opt,name=custom_game_uses_account_records,json=customGameUsesAccountRecords" json:"custom_game_uses_account_records,omitempty"`
	GameStartTime                              *uint32                                        `protobuf:"varint,87,opt,name=game_start_time,json=gameStartTime" json:"game_start_time,omitempty"`
	PauseSetting                               *LobbyDotaPauseSetting                         `protobuf:"varint,88,opt,name=pause_setting,json=pauseSetting,enum=LobbyDotaPauseSetting,def=0" json:"pause_setting,omitempty"`
	LobbyMvpAccountId                          *uint32                                        `protobuf:"varint,89,opt,name=lobby_mvp_account_id,json=lobbyMvpAccountId" json:"lobby_mvp_account_id,omitempty"`
	WeekendTourneyDivisionId                   *uint32                                        `protobuf:"varint,90,opt,name=weekend_tourney_division_id,json=weekendTourneyDivisionId" json:"weekend_tourney_division_id,omitempty"`
	WeekendTourneySkillLevel                   *uint32                                        `protobuf:"varint,91,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	WeekendTourneyBracketRound                 *uint32                                        `protobuf:"varint,92,opt,name=weekend_tourney_bracket_round,json=weekendTourneyBracketRound" json:"weekend_tourney_bracket_round,omitempty"`
	BotDifficultyDire                          *DOTABotDifficulty           `protobuf:"varint,93,opt,name=bot_difficulty_dire,json=botDifficultyDire,enum=DOTABotDifficulty,def=3" json:"bot_difficulty_dire,omitempty"`
	BotRadiant                                 *uint64                                        `protobuf:"varint,94,opt,name=bot_radiant,json=botRadiant" json:"bot_radiant,omitempty"`
	BotDire                                    *uint64                                        `protobuf:"varint,95,opt,name=bot_dire,json=botDire" json:"bot_dire,omitempty"`
	EventProgressionEnabled                    []EEvent                     `protobuf:"varint,96,rep,name=event_progression_enabled,json=eventProgressionEnabled,enum=EEvent" json:"event_progression_enabled,omitempty"`
	SelectionPriorityRules                     *DOTASelectionPriorityRules  `protobuf:"varint,97,opt,name=selection_priority_rules,json=selectionPriorityRules,enum=DOTASelectionPriorityRules,def=0" json:"selection_priority_rules,omitempty"`
	SeriesPreviousSelectionPriorityTeamId      *uint32                                        `protobuf:"varint,98,opt,name=series_previous_selection_priority_team_id,json=seriesPreviousSelectionPriorityTeamId" json:"series_previous_selection_priority_team_id,omitempty"`
	SeriesCurrentSelectionPriorityTeamId       *uint32                                        `protobuf:"varint,99,opt,name=series_current_selection_priority_team_id,json=seriesCurrentSelectionPriorityTeamId" json:"series_current_selection_priority_team_id,omitempty"`
	SeriesCurrentPriorityTeamChoice            *DOTASelectionPriorityChoice `protobuf:"varint,100,opt,name=series_current_priority_team_choice,json=seriesCurrentPriorityTeamChoice,enum=DOTASelectionPriorityChoice,def=0" json:"series_current_priority_team_choice,omitempty"`
	SeriesCurrentNonPriorityTeamChoice         *DOTASelectionPriorityChoice `protobuf:"varint,101,opt,name=series_current_non_priority_team_choice,json=seriesCurrentNonPriorityTeamChoice,enum=DOTASelectionPriorityChoice,def=0" json:"series_current_non_priority_team_choice,omitempty"`
	SeriesCurrentSelectionPriorityUsedCoinToss *bool                                          `protobuf:"varint,102,opt,name=series_current_selection_priority_used_coin_toss,json=seriesCurrentSelectionPriorityUsedCoinToss" json:"series_current_selection_priority_used_coin_toss,omitempty"`
	CurrentPrimaryEvent                        *EEvent                      `protobuf:"varint,103,opt,name=current_primary_event,json=currentPrimaryEvent,enum=EEvent,def=0" json:"current_primary_event,omitempty"`
	LowpriDeprecated                           *bool                                          `protobuf:"varint,104,opt,name=lowpri_deprecated,json=lowpriDeprecated" json:"lowpri_deprecated,omitempty"`
	XXX_unrecognized                           []byte                                         `json:"-"`
}

func (m *CSODOTALobby) Reset()                    { *m = CSODOTALobby{} }
func (m *CSODOTALobby) String() string            { return proto.CompactTextString(m) }
func (*CSODOTALobby) ProtoMessage()               {}
func (*CSODOTALobby) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{9} }

const Default_CSODOTALobby_ServerId uint64 = 0
const Default_CSODOTALobby_State CSODOTALobby_State = CSODOTALobby_UI
const Default_CSODOTALobby_LobbyType CSODOTALobby_LobbyType = CSODOTALobby_INVALID
const Default_CSODOTALobby_ServerRegion uint32 = 0
const Default_CSODOTALobby_GameState DOTA_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
const Default_CSODOTALobby_CmPick DOTA_CM_PICK = DOTA_CM_PICK_DOTA_CM_RANDOM
const Default_CSODOTALobby_AllowSpectating bool = true
const Default_CSODOTALobby_BotDifficultyRadiant DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CSODOTALobby_GameVersion DOTAGameVersion = DOTAGameVersion_GAME_VERSION_CURRENT
const Default_CSODOTALobby_PenaltyLevelRadiant uint32 = 0
const Default_CSODOTALobby_PenaltyLevelDire uint32 = 0
const Default_CSODOTALobby_Allchat bool = false
const Default_CSODOTALobby_DotaTvDelay LobbyDotaTVDelay = LobbyDotaTVDelay_LobbyDotaTV_10
const Default_CSODOTALobby_MatchOutcome EMatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown
const Default_CSODOTALobby_PartnerType PartnerAccountType = PartnerAccountType_PARTNER_NONE
const Default_CSODOTALobby_Visibility DOTALobbyVisibility = DOTALobbyVisibility_DOTALobbyVisibility_Public
const Default_CSODOTALobby_PauseSetting LobbyDotaPauseSetting = LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited
const Default_CSODOTALobby_BotDifficultyDire DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CSODOTALobby_SelectionPriorityRules DOTASelectionPriorityRules = DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Manual
const Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice DOTASelectionPriorityChoice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
const Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice DOTASelectionPriorityChoice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
const Default_CSODOTALobby_CurrentPrimaryEvent EEvent = EEvent_EVENT_ID_NONE

func (m *CSODOTALobby) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CSODOTALobby) GetMembers() []*CDOTALobbyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTALobby) GetLeftMembers() []*CDOTALobbyMember {
	if m != nil {
		return m.LeftMembers
	}
	return nil
}

func (m *CSODOTALobby) GetLeaderId() uint64 {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return 0
}

func (m *CSODOTALobby) GetServerId() uint64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return Default_CSODOTALobby_ServerId
}

func (m *CSODOTALobby) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CSODOTALobby) GetPendingInvites() []uint64 {
	if m != nil {
		return m.PendingInvites
	}
	return nil
}

func (m *CSODOTALobby) GetState() CSODOTALobby_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CSODOTALobby_State
}

func (m *CSODOTALobby) GetConnect() string {
	if m != nil && m.Connect != nil {
		return *m.Connect
	}
	return ""
}

func (m *CSODOTALobby) GetLobbyType() CSODOTALobby_LobbyType {
	if m != nil && m.LobbyType != nil {
		return *m.LobbyType
	}
	return Default_CSODOTALobby_LobbyType
}

func (m *CSODOTALobby) GetAllowCheats() bool {
	if m != nil && m.AllowCheats != nil {
		return *m.AllowCheats
	}
	return false
}

func (m *CSODOTALobby) GetFillWithBots() bool {
	if m != nil && m.FillWithBots != nil {
		return *m.FillWithBots
	}
	return false
}

func (m *CSODOTALobby) GetIntroMode() bool {
	if m != nil && m.IntroMode != nil {
		return *m.IntroMode
	}
	return false
}

func (m *CSODOTALobby) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *CSODOTALobby) GetTeamDetails() []*CLobbyTeamDetails {
	if m != nil {
		return m.TeamDetails
	}
	return nil
}

func (m *CSODOTALobby) GetTutorialLesson() uint32 {
	if m != nil && m.TutorialLesson != nil {
		return *m.TutorialLesson
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentGameId() uint32 {
	if m != nil && m.TournamentGameId != nil {
		return *m.TournamentGameId
	}
	return 0
}

func (m *CSODOTALobby) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return Default_CSODOTALobby_ServerRegion
}

func (m *CSODOTALobby) GetGameState() DOTA_GameState {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return Default_CSODOTALobby_GameState
}

func (m *CSODOTALobby) GetNumSpectators() uint32 {
	if m != nil && m.NumSpectators != nil {
		return *m.NumSpectators
	}
	return 0
}

func (m *CSODOTALobby) GetMatchgroup() uint32 {
	if m != nil && m.Matchgroup != nil {
		return *m.Matchgroup
	}
	return 0
}

func (m *CSODOTALobby) GetCmPick() DOTA_CM_PICK {
	if m != nil && m.CmPick != nil {
		return *m.CmPick
	}
	return Default_CSODOTALobby_CmPick
}

func (m *CSODOTALobby) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CSODOTALobby) GetAllowSpectating() bool {
	if m != nil && m.AllowSpectating != nil {
		return *m.AllowSpectating
	}
	return Default_CSODOTALobby_AllowSpectating
}

func (m *CSODOTALobby) GetBotDifficultyRadiant() DOTABotDifficulty {
	if m != nil && m.BotDifficultyRadiant != nil {
		return *m.BotDifficultyRadiant
	}
	return Default_CSODOTALobby_BotDifficultyRadiant
}

func (m *CSODOTALobby) GetGameVersion() DOTAGameVersion {
	if m != nil && m.GameVersion != nil {
		return *m.GameVersion
	}
	return Default_CSODOTALobby_GameVersion
}

func (m *CSODOTALobby) GetTimedRewardDetails() []*CLobbyTimedRewardDetails {
	if m != nil {
		return m.TimedRewardDetails
	}
	return nil
}

func (m *CSODOTALobby) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CSODOTALobby) GetLeagueid() uint32 {
	if m != nil && m.Leagueid != nil {
		return *m.Leagueid
	}
	return 0
}

func (m *CSODOTALobby) GetPenaltyLevelRadiant() uint32 {
	if m != nil && m.PenaltyLevelRadiant != nil {
		return *m.PenaltyLevelRadiant
	}
	return Default_CSODOTALobby_PenaltyLevelRadiant
}

func (m *CSODOTALobby) GetPenaltyLevelDire() uint32 {
	if m != nil && m.PenaltyLevelDire != nil {
		return *m.PenaltyLevelDire
	}
	return Default_CSODOTALobby_PenaltyLevelDire
}

func (m *CSODOTALobby) GetLoadGameId() uint32 {
	if m != nil && m.LoadGameId != nil {
		return *m.LoadGameId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CSODOTALobby) GetRadiantSeriesWins() uint32 {
	if m != nil && m.RadiantSeriesWins != nil {
		return *m.RadiantSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetDireSeriesWins() uint32 {
	if m != nil && m.DireSeriesWins != nil {
		return *m.DireSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetLootGenerated() uint32 {
	if m != nil && m.LootGenerated != nil {
		return *m.LootGenerated
	}
	return 0
}

func (m *CSODOTALobby) GetLootAwarded() uint32 {
	if m != nil && m.LootAwarded != nil {
		return *m.LootAwarded
	}
	return 0
}

func (m *CSODOTALobby) GetAllchat() bool {
	if m != nil && m.Allchat != nil {
		return *m.Allchat
	}
	return Default_CSODOTALobby_Allchat
}

func (m *CSODOTALobby) GetDotaTvDelay() LobbyDotaTVDelay {
	if m != nil && m.DotaTvDelay != nil {
		return *m.DotaTvDelay
	}
	return Default_CSODOTALobby_DotaTvDelay
}

func (m *CSODOTALobby) GetCustomGameMode() string {
	if m != nil && m.CustomGameMode != nil {
		return *m.CustomGameMode
	}
	return ""
}

func (m *CSODOTALobby) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CSODOTALobby) GetCustomDifficulty() uint32 {
	if m != nil && m.CustomDifficulty != nil {
		return *m.CustomDifficulty
	}
	return 0
}

func (m *CSODOTALobby) GetLan() bool {
	if m != nil && m.Lan != nil {
		return *m.Lan
	}
	return false
}

func (m *CSODOTALobby) GetBroadcastChannelInfo() []*CLobbyBroadcastChannelInfo {
	if m != nil {
		return m.BroadcastChannelInfo
	}
	return nil
}

func (m *CSODOTALobby) GetFirstLeaverAccountid() uint32 {
	if m != nil && m.FirstLeaverAccountid != nil {
		return *m.FirstLeaverAccountid
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CSODOTALobby) GetLowPriority() bool {
	if m != nil && m.LowPriority != nil {
		return *m.LowPriority
	}
	return false
}

func (m *CSODOTALobby) GetExtraMessages() []*CSODOTALobby_CExtraMsg {
	if m != nil {
		return m.ExtraMessages
	}
	return nil
}

func (m *CSODOTALobby) GetSaveGame() *CDOTASaveGame {
	if m != nil {
		return m.SaveGame
	}
	return nil
}

func (m *CSODOTALobby) GetFirstBloodHappened() bool {
	if m != nil && m.FirstBloodHappened != nil {
		return *m.FirstBloodHappened
	}
	return false
}

func (m *CSODOTALobby) GetMatchOutcome() EMatchOutcome {
	if m != nil && m.MatchOutcome != nil {
		return *m.MatchOutcome
	}
	return Default_CSODOTALobby_MatchOutcome
}

func (m *CSODOTALobby) GetMassDisconnect() bool {
	if m != nil && m.MassDisconnect != nil {
		return *m.MassDisconnect
	}
	return false
}

func (m *CSODOTALobby) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CSODOTALobby) GetCustomMinPlayers() uint32 {
	if m != nil && m.CustomMinPlayers != nil {
		return *m.CustomMinPlayers
	}
	return 0
}

func (m *CSODOTALobby) GetCustomMaxPlayers() uint32 {
	if m != nil && m.CustomMaxPlayers != nil {
		return *m.CustomMaxPlayers
	}
	return 0
}

func (m *CSODOTALobby) GetPartnerType() PartnerAccountType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return Default_CSODOTALobby_PartnerType
}

func (m *CSODOTALobby) GetLanHostPingToServerRegion() uint32 {
	if m != nil && m.LanHostPingToServerRegion != nil {
		return *m.LanHostPingToServerRegion
	}
	return 0
}

func (m *CSODOTALobby) GetVisibility() DOTALobbyVisibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return Default_CSODOTALobby_Visibility
}

func (m *CSODOTALobby) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameAutoCreatedLobby() bool {
	if m != nil && m.CustomGameAutoCreatedLobby != nil {
		return *m.CustomGameAutoCreatedLobby
	}
	return false
}

func (m *CSODOTALobby) GetLeagueSeriesId() uint32 {
	if m != nil && m.LeagueSeriesId != nil {
		return *m.LeagueSeriesId
	}
	return 0
}

func (m *CSODOTALobby) GetLeagueGameId() uint32 {
	if m != nil && m.LeagueGameId != nil {
		return *m.LeagueGameId
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

func (m *CSODOTALobby) GetPreviousSeriesMatches() []uint64 {
	if m != nil {
		return m.PreviousSeriesMatches
	}
	return nil
}

func (m *CSODOTALobby) GetPreviousMatchOverride() uint64 {
	if m != nil && m.PreviousMatchOverride != nil {
		return *m.PreviousMatchOverride
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameUsesAccountRecords() bool {
	if m != nil && m.CustomGameUsesAccountRecords != nil {
		return *m.CustomGameUsesAccountRecords
	}
	return false
}

func (m *CSODOTALobby) GetGameStartTime() uint32 {
	if m != nil && m.GameStartTime != nil {
		return *m.GameStartTime
	}
	return 0
}

func (m *CSODOTALobby) GetPauseSetting() LobbyDotaPauseSetting {
	if m != nil && m.PauseSetting != nil {
		return *m.PauseSetting
	}
	return Default_CSODOTALobby_PauseSetting
}

func (m *CSODOTALobby) GetLobbyMvpAccountId() uint32 {
	if m != nil && m.LobbyMvpAccountId != nil {
		return *m.LobbyMvpAccountId
	}
	return 0
}

func (m *CSODOTALobby) GetWeekendTourneyDivisionId() uint32 {
	if m != nil && m.WeekendTourneyDivisionId != nil {
		return *m.WeekendTourneyDivisionId
	}
	return 0
}

func (m *CSODOTALobby) GetWeekendTourneySkillLevel() uint32 {
	if m != nil && m.WeekendTourneySkillLevel != nil {
		return *m.WeekendTourneySkillLevel
	}
	return 0
}

func (m *CSODOTALobby) GetWeekendTourneyBracketRound() uint32 {
	if m != nil && m.WeekendTourneyBracketRound != nil {
		return *m.WeekendTourneyBracketRound
	}
	return 0
}

func (m *CSODOTALobby) GetBotDifficultyDire() DOTABotDifficulty {
	if m != nil && m.BotDifficultyDire != nil {
		return *m.BotDifficultyDire
	}
	return Default_CSODOTALobby_BotDifficultyDire
}

func (m *CSODOTALobby) GetBotRadiant() uint64 {
	if m != nil && m.BotRadiant != nil {
		return *m.BotRadiant
	}
	return 0
}

func (m *CSODOTALobby) GetBotDire() uint64 {
	if m != nil && m.BotDire != nil {
		return *m.BotDire
	}
	return 0
}

func (m *CSODOTALobby) GetEventProgressionEnabled() []EEvent {
	if m != nil {
		return m.EventProgressionEnabled
	}
	return nil
}

func (m *CSODOTALobby) GetSelectionPriorityRules() DOTASelectionPriorityRules {
	if m != nil && m.SelectionPriorityRules != nil {
		return *m.SelectionPriorityRules
	}
	return Default_CSODOTALobby_SelectionPriorityRules
}

func (m *CSODOTALobby) GetSeriesPreviousSelectionPriorityTeamId() uint32 {
	if m != nil && m.SeriesPreviousSelectionPriorityTeamId != nil {
		return *m.SeriesPreviousSelectionPriorityTeamId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesCurrentSelectionPriorityTeamId() uint32 {
	if m != nil && m.SeriesCurrentSelectionPriorityTeamId != nil {
		return *m.SeriesCurrentSelectionPriorityTeamId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesCurrentPriorityTeamChoice() DOTASelectionPriorityChoice {
	if m != nil && m.SeriesCurrentPriorityTeamChoice != nil {
		return *m.SeriesCurrentPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice
}

func (m *CSODOTALobby) GetSeriesCurrentNonPriorityTeamChoice() DOTASelectionPriorityChoice {
	if m != nil && m.SeriesCurrentNonPriorityTeamChoice != nil {
		return *m.SeriesCurrentNonPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice
}

func (m *CSODOTALobby) GetSeriesCurrentSelectionPriorityUsedCoinToss() bool {
	if m != nil && m.SeriesCurrentSelectionPriorityUsedCoinToss != nil {
		return *m.SeriesCurrentSelectionPriorityUsedCoinToss
	}
	return false
}

func (m *CSODOTALobby) GetCurrentPrimaryEvent() EEvent {
	if m != nil && m.CurrentPrimaryEvent != nil {
		return *m.CurrentPrimaryEvent
	}
	return Default_CSODOTALobby_CurrentPrimaryEvent
}

func (m *CSODOTALobby) GetLowpriDeprecated() bool {
	if m != nil && m.LowpriDeprecated != nil {
		return *m.LowpriDeprecated
	}
	return false
}

type CSODOTALobby_CExtraMsg struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents         []byte  `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSODOTALobby_CExtraMsg) Reset()                    { *m = CSODOTALobby_CExtraMsg{} }
func (m *CSODOTALobby_CExtraMsg) String() string            { return proto.CompactTextString(m) }
func (*CSODOTALobby_CExtraMsg) ProtoMessage()               {}
func (*CSODOTALobby_CExtraMsg) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{9, 0} }

func (m *CSODOTALobby_CExtraMsg) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CSODOTALobby_CExtraMsg) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type CMsgLobbyPlaytestDetails struct {
	Json             *string `protobuf:"bytes,1,opt,name=json" json:"json,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgLobbyPlaytestDetails) Reset()                    { *m = CMsgLobbyPlaytestDetails{} }
func (m *CMsgLobbyPlaytestDetails) String() string            { return proto.CompactTextString(m) }
func (*CMsgLobbyPlaytestDetails) ProtoMessage()               {}
func (*CMsgLobbyPlaytestDetails) Descriptor() ([]byte, []int) { return dota_gcmessages_common_match_management_fileDescriptor0, []int{10} }

func (m *CMsgLobbyPlaytestDetails) GetJson() string {
	if m != nil && m.Json != nil {
		return *m.Json
	}
	return ""
}

func init() {
	proto.RegisterType((*CSODOTAPartyMember)(nil), "CSODOTAPartyMember")
	proto.RegisterType((*CSODOTAParty)(nil), "CSODOTAParty")
	proto.RegisterType((*CSODOTAPartyInvite)(nil), "CSODOTAPartyInvite")
	proto.RegisterType((*CSODOTAPartyInvite_PartyMember)(nil), "CSODOTAPartyInvite.PartyMember")
	proto.RegisterType((*CSODOTALobbyInvite)(nil), "CSODOTALobbyInvite")
	proto.RegisterType((*CSODOTALobbyInvite_LobbyMember)(nil), "CSODOTALobbyInvite.LobbyMember")
	proto.RegisterType((*CMsgLeaverState)(nil), "CMsgLeaverState")
	proto.RegisterType((*CDOTALobbyMember)(nil), "CDOTALobbyMember")
	proto.RegisterType((*CDOTALobbyMember_CDOTALobbyMemberXPBonus)(nil), "CDOTALobbyMember.CDOTALobbyMemberXPBonus")
	proto.RegisterType((*CLobbyTeamDetails)(nil), "CLobbyTeamDetails")
	proto.RegisterType((*CLobbyTimedRewardDetails)(nil), "CLobbyTimedRewardDetails")
	proto.RegisterType((*CLobbyBroadcastChannelInfo)(nil), "CLobbyBroadcastChannelInfo")
	proto.RegisterType((*CSODOTALobby)(nil), "CSODOTALobby")
	proto.RegisterType((*CSODOTALobby_CExtraMsg)(nil), "CSODOTALobby.CExtraMsg")
	proto.RegisterType((*CMsgLobbyPlaytestDetails)(nil), "CMsgLobbyPlaytestDetails")
	proto.RegisterEnum("LobbyDotaTVDelay", LobbyDotaTVDelay_name, LobbyDotaTVDelay_value)
	proto.RegisterEnum("LobbyDotaPauseSetting", LobbyDotaPauseSetting_name, LobbyDotaPauseSetting_value)
	proto.RegisterEnum("CSODOTAParty_State", CSODOTAParty_State_name, CSODOTAParty_State_value)
	proto.RegisterEnum("CSODOTALobby_State", CSODOTALobby_State_name, CSODOTALobby_State_value)
	proto.RegisterEnum("CSODOTALobby_LobbyType", CSODOTALobby_LobbyType_name, CSODOTALobby_LobbyType_value)
}

func init() { proto.RegisterFile("dota_gcmessages_common_match_management.proto", dota_gcmessages_common_match_management_fileDescriptor0) }

var dota_gcmessages_common_match_management_fileDescriptor0 = []byte{
	// 4747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x5a, 0x5b, 0x73, 0x1b, 0x47,
	0x76, 0x36, 0x28, 0x8a, 0x04, 0x1b, 0x17, 0x82, 0x4d, 0x8a, 0x1c, 0x52, 0x37, 0x9a, 0xba, 0x71,
	0x25, 0x9b, 0x96, 0xb5, 0xb6, 0xbc, 0xe6, 0xda, 0xeb, 0x02, 0x01, 0x48, 0x82, 0x45, 0x80, 0xf0,
	0x00, 0x94, 0xac, 0x64, 0x37, 0x9d, 0xc6, 0x4c, 0x13, 0xec, 0xe5, 0x5c, 0xb0, 0xd3, 0x03, 0x4a,
	0xdc, 0xa7, 0x4d, 0xe5, 0x2d, 0x55, 0x79, 0xc8, 0x53, 0x52, 0x95, 0x97, 0xbc, 0x24, 0xff, 0x20,
	0x95, 0xe7, 0x54, 0x7e, 0xd8, 0xa6, 0xce, 0xe9, 0x9e, 0xc1, 0x00, 0x04, 0xf7, 0x92, 0xa4, 0x2a,
	0x7a, 0x11, 0xe7, 0x3b, 0x5f, 0xf7, 0xf4, 0xf4, 0x39, 0x7d, 0x6e, 0x0d, 0xf2, 0xa9, 0x1b, 0xc6,
	0x9c, 0x0d, 0x1c, 0x5f, 0x28, 0xc5, 0x07, 0x42, 0x31, 0x27, 0xf4, 0xfd, 0x30, 0x60, 0x3e, 0x8f,
	0x9d, 0x53, 0xe6, 0xf3, 0x80, 0x0f, 0x84, 0x2f, 0x82, 0x78, 0x6f, 0x18, 0x85, 0x71, 0xb8, 0xb5,
	0xaa, 0x62, 0xc1, 0xfd, 0x84, 0x6c, 0xc0, 0xf5, 0x81, 0xa3, 0xdc, 0xb3, 0xcc, 0x24, 0x06, 0xdf,
	0xc0, 0xb9, 0xd5, 0x29, 0x8f, 0x84, 0xcb, 0x44, 0x30, 0xf2, 0x8d, 0x60, 0xe7, 0x9f, 0xaf, 0x11,
	0x5a, 0xeb, 0x1e, 0xd5, 0x8f, 0x7a, 0xd5, 0x0e, 0x8f, 0xe2, 0x8b, 0x96, 0xf0, 0xfb, 0x22, 0xa2,
	0x75, 0x52, 0x1c, 0xf2, 0x28, 0x0e, 0x44, 0xc4, 0xe2, 0x8b, 0xa1, 0xb0, 0x72, 0xdb, 0xb9, 0xdd,
	0xf2, 0xb3, 0xd5, 0xbd, 0x8e, 0x06, 0xab, 0x8e, 0x13, 0x8e, 0x82, 0xb8, 0x77, 0x31, 0x14, 0xfb,
	0xc5, 0x4e, 0xd5, 0xee, 0xb5, 0x1b, 0x36, 0x6b, 0x1f, 0xb5, 0x1b, 0x76, 0xc1, 0x0c, 0x03, 0x11,
	0xdd, 0x24, 0x79, 0x09, 0x9f, 0xc1, 0x9d, 0x53, 0x6b, 0x6e, 0x3b, 0xb7, 0x9b, 0xb7, 0x17, 0xa5,
	0xaa, 0xc1, 0x23, 0xdd, 0x23, 0x2b, 0x91, 0x18, 0xc8, 0x30, 0x60, 0x43, 0x19, 0x0c, 0x98, 0x13,
	0xba, 0x42, 0x59, 0xf3, 0xdb, 0xd7, 0x76, 0x4b, 0x07, 0x73, 0x95, 0x9c, 0xbd, 0xac, 0x85, 0x1d,
	0x19, 0x0c, 0x6a, 0x20, 0x9a, 0xe6, 0xc7, 0xd2, 0x17, 0xca, 0xba, 0x3e, 0x8b, 0xdf, 0x03, 0x11,
	0xfd, 0x39, 0xd9, 0xca, 0xf2, 0x4f, 0xb8, 0xf4, 0x84, 0xcb, 0xfa, 0x32, 0xf6, 0xb9, 0x3a, 0xb3,
	0x16, 0xb6, 0x73, 0xbb, 0x25, 0x7b, 0x63, 0x3c, 0xe8, 0x05, 0xca, 0x0f, 0xb4, 0x98, 0xee, 0x91,
	0xd5, 0x38, 0x1c, 0x45, 0x81, 0xb8, 0x60, 0xea, 0x4c, 0x7a, 0x1e, 0xf3, 0xc4, 0xb9, 0xf0, 0xac,
	0x45, 0x1c, 0xb5, 0x62, 0x44, 0x5d, 0x90, 0x1c, 0x82, 0x80, 0xde, 0x23, 0xa5, 0x84, 0xdf, 0x1f,
	0x5d, 0xc8, 0xc0, 0xca, 0x23, 0xb3, 0x68, 0xc0, 0x03, 0xc0, 0xe8, 0x33, 0x72, 0x23, 0x21, 0x0d,
	0x23, 0x71, 0x2e, 0x82, 0x98, 0x8d, 0x82, 0x58, 0x7a, 0xd6, 0x12, 0x92, 0x93, 0x37, 0x76, 0xb4,
	0xec, 0x18, 0x44, 0x3b, 0xff, 0xb1, 0x42, 0x8a, 0x59, 0xed, 0xd0, 0xbb, 0x24, 0x0f, 0x1b, 0x7c,
	0xc1, 0xa4, 0x8b, 0x3a, 0x99, 0x3f, 0x98, 0xff, 0xdd, 0xbf, 0xdd, 0xce, 0xd9, 0x8b, 0x88, 0x36,
	0x5d, 0x7a, 0x93, 0x2c, 0x79, 0x82, 0xbb, 0x22, 0x02, 0x06, 0xec, 0xf9, 0x82, 0x9d, 0xd7, 0x40,
	0xd3, 0xa5, 0xb7, 0x09, 0xf1, 0x51, 0xbf, 0x4c, 0xba, 0xca, 0xba, 0xb6, 0x7d, 0x6d, 0x77, 0xc1,
	0x5e, 0xd2, 0x48, 0xd3, 0x55, 0x20, 0x1e, 0x70, 0x5f, 0x30, 0xdf, 0x28, 0x03, 0x96, 0xb5, 0x04,
	0x48, 0x0b, 0x55, 0xf0, 0x29, 0xb9, 0xae, 0x62, 0x1e, 0x0b, 0xdc, 0x3d, 0x30, 0x86, 0xec, 0xca,
	0xf6, 0xba, 0x20, 0xda, 0x9f, 0x3b, 0x6e, 0xda, 0x9a, 0x45, 0x5f, 0x93, 0x1d, 0x71, 0x72, 0x22,
	0x9c, 0x58, 0x9e, 0x0b, 0xa6, 0x62, 0x1e, 0xc5, 0xc2, 0xd5, 0xb6, 0xec, 0xf3, 0xb3, 0x44, 0x87,
	0x66, 0x4f, 0xef, 0xa6, 0xcc, 0xae, 0x26, 0xb6, 0xc6, 0x3c, 0xd0, 0x27, 0xfd, 0x8e, 0xdc, 0x8a,
	0xf8, 0xfb, 0xab, 0xa7, 0xd9, 0xc6, 0x69, 0x36, 0x23, 0xfe, 0xfe, 0x8a, 0x09, 0x3e, 0x21, 0x94,
	0xc7, 0xb1, 0xf0, 0x87, 0xb1, 0x9e, 0x44, 0x0f, 0xfb, 0x18, 0x87, 0x55, 0x8c, 0x04, 0x87, 0x22,
	0xfb, 0x2e, 0x29, 0x24, 0xec, 0x60, 0xe4, 0x5b, 0x3b, 0x48, 0x23, 0x06, 0x6a, 0x8f, 0x7c, 0xba,
	0x4d, 0x0a, 0xb8, 0x86, 0x41, 0x14, 0x8e, 0x86, 0xca, 0x2a, 0x20, 0x21, 0x0b, 0xd1, 0x2f, 0xc9,
	0x86, 0x17, 0xbe, 0x67, 0xc3, 0x48, 0x86, 0x91, 0x8c, 0x2f, 0x18, 0xd7, 0x47, 0x06, 0xd4, 0xb2,
	0x8a, 0xec, 0x35, 0x2f, 0x7c, 0xdf, 0x31, 0x52, 0x73, 0x9e, 0x9a, 0x2e, 0xfd, 0x86, 0x10, 0x7d,
	0xde, 0xf1, 0xd8, 0xdd, 0xc0, 0x9d, 0x26, 0x7b, 0xf8, 0x35, 0x78, 0xda, 0x56, 0x5a, 0xd5, 0x5e,
	0xed, 0x15, 0xeb, 0xbd, 0xeb, 0x34, 0x58, 0xad, 0xda, 0x3d, 0xae, 0x1e, 0xda, 0x4b, 0x7e, 0x22,
	0xa5, 0x3f, 0x90, 0x72, 0x3f, 0x8c, 0x99, 0x2b, 0x4f, 0x4e, 0xa4, 0x33, 0xf2, 0xe2, 0x0b, 0x6b,
	0x1d, 0x67, 0xa0, 0x7b, 0xa0, 0xa8, 0x83, 0x30, 0xae, 0xa7, 0x92, 0xfd, 0xf5, 0x83, 0xa3, 0x1e,
	0xab, 0x37, 0x5f, 0xbc, 0x68, 0xd6, 0x8e, 0x0f, 0x7b, 0xef, 0x58, 0xa7, 0xda, 0xed, 0x36, 0xdf,
	0x34, 0xec, 0x52, 0x3f, 0x4b, 0xa3, 0x1b, 0x64, 0x11, 0xfc, 0x0c, 0xac, 0x7b, 0x03, 0xd7, 0xbd,
	0x00, 0x8f, 0xda, 0xd2, 0x50, 0x10, 0x70, 0x5f, 0x58, 0x3f, 0xdd, 0xce, 0xed, 0x2e, 0xd9, 0x79,
	0x00, 0xda, 0xdc, 0x17, 0x74, 0x9b, 0x14, 0x51, 0x38, 0x92, 0xcc, 0x0b, 0x07, 0xa1, 0xf5, 0x05,
	0xd8, 0xaa, 0x4d, 0x00, 0x3b, 0x96, 0x87, 0xe1, 0x20, 0xa4, 0xf7, 0x49, 0x19, 0x19, 0x7d, 0xae,
	0x84, 0xe6, 0x7c, 0x89, 0x1c, 0x1c, 0x77, 0xc0, 0x95, 0x40, 0xd6, 0xd7, 0x64, 0x53, 0x6f, 0x87,
	0x2b, 0x15, 0xef, 0xc3, 0x11, 0xc6, 0x33, 0xc3, 0x5c, 0xb0, 0x43, 0x0b, 0xd7, 0xb3, 0x8e, 0x84,
	0xba, 0x91, 0xe3, 0xb9, 0xa9, 0x83, 0xfd, 0x5d, 0x1e, 0x9a, 0x51, 0xc1, 0xe6, 0x8c, 0xa1, 0x63,
	0x25, 0x54, 0xc9, 0xed, 0xac, 0x85, 0xf9, 0xfc, 0x03, 0x8b, 0x78, 0x30, 0x10, 0xcc, 0x97, 0xc1,
	0x28, 0x16, 0xca, 0xda, 0xc2, 0xe1, 0x5b, 0x19, 0x52, 0x8b, 0x7f, 0xb0, 0x81, 0xd2, 0xd2, 0x0c,
	0xfa, 0x90, 0x94, 0x51, 0xea, 0xf1, 0x60, 0x30, 0x02, 0x47, 0x6c, 0xdd, 0xc4, 0x31, 0x53, 0x28,
	0xfd, 0x94, 0x2c, 0xea, 0x03, 0xa8, 0xac, 0xdb, 0xdb, 0xd7, 0x76, 0x0b, 0x53, 0xc7, 0x4a, 0xbb,
	0x63, 0x3b, 0xe1, 0xd0, 0x1d, 0x52, 0x0a, 0x87, 0x22, 0x60, 0x83, 0x91, 0xf4, 0x5c, 0xf8, 0x90,
	0x3b, 0xda, 0xf2, 0x00, 0x7c, 0x09, 0x58, 0xd3, 0x05, 0x6f, 0x64, 0x22, 0x07, 0xb2, 0x94, 0x75,
	0x17, 0xdc, 0xa4, 0x5d, 0xd4, 0x20, 0xb2, 0x14, 0x1c, 0xa8, 0x09, 0xf3, 0x84, 0x63, 0xae, 0x58,
	0x24, 0x7c, 0x2e, 0x03, 0x19, 0x0c, 0xac, 0x7b, 0xfa, 0x40, 0x65, 0x6c, 0xf4, 0x25, 0x30, 0xec,
	0x84, 0x40, 0x7f, 0x4a, 0xd6, 0x71, 0x25, 0x27, 0x61, 0xc4, 0x7e, 0x1d, 0xca, 0x80, 0x45, 0xe2,
	0x37, 0x23, 0xa1, 0x62, 0x65, 0xed, 0xa2, 0xa7, 0x5f, 0x05, 0xe9, 0x8b, 0x30, 0xfa, 0x3e, 0x94,
	0x81, 0x6d, 0x44, 0xf4, 0x39, 0x29, 0x2a, 0x70, 0x7c, 0x32, 0x38, 0x97, 0xb0, 0x8f, 0x3f, 0x99,
	0xf1, 0xc9, 0x4d, 0x94, 0xd9, 0x05, 0x20, 0xea, 0xbf, 0x71, 0x5c, 0x24, 0x9c, 0xf3, 0x74, 0xdc,
	0xe3, 0x3f, 0x30, 0x0e, 0x88, 0xc9, 0xb8, 0x7b, 0xa4, 0x94, 0x28, 0xfd, 0xc4, 0xe3, 0x03, 0x65,
	0x3d, 0xd1, 0x8e, 0xd9, 0x80, 0x2f, 0x00, 0x03, 0x6f, 0x6f, 0x42, 0x85, 0x12, 0x9e, 0x70, 0x12,
	0xea, 0x27, 0xda, 0xdb, 0x6b, 0x51, 0x17, 0x25, 0x9a, 0xff, 0x9c, 0x6c, 0x88, 0x0f, 0x8e, 0x37,
	0x52, 0xe0, 0xd8, 0xd0, 0x6b, 0x73, 0x5f, 0x68, 0xb3, 0xfa, 0x14, 0xc7, 0xdc, 0x48, 0xc5, 0xbd,
	0x54, 0xda, 0x74, 0xb3, 0x51, 0xc5, 0x95, 0xe7, 0x52, 0xc1, 0x1b, 0xa5, 0x6b, 0x7d, 0x36, 0x11,
	0x55, 0xea, 0x46, 0xd2, 0x74, 0xb3, 0x01, 0x43, 0x39, 0xa7, 0xc2, 0x1d, 0x79, 0x42, 0x7b, 0xad,
	0xa7, 0x13, 0x01, 0xa3, 0x6b, 0x64, 0xe8, 0xb8, 0xae, 0x88, 0x5c, 0x9f, 0x5f, 0x15, 0xb9, 0x32,
	0xef, 0xe8, 0x47, 0xdc, 0x39, 0x13, 0x31, 0x8b, 0xc2, 0x51, 0xe0, 0x5a, 0xcf, 0x26, 0xde, 0x71,
	0xa0, 0x65, 0x36, 0x88, 0xe8, 0xb7, 0xe4, 0x66, 0x32, 0xe6, 0x37, 0x23, 0x31, 0x12, 0xcc, 0x15,
	0xdc, 0xf5, 0x64, 0x60, 0x56, 0xf7, 0x1c, 0x47, 0x5a, 0x86, 0xf2, 0x03, 0x30, 0xea, 0x86, 0x80,
	0x4b, 0xfc, 0x9b, 0x1c, 0xb9, 0x75, 0xc5, 0x78, 0x1d, 0x5e, 0xbe, 0x42, 0x97, 0x75, 0x73, 0xaf,
	0xd1, 0x9b, 0x31, 0x85, 0x0e, 0x33, 0xf7, 0xce, 0xd8, 0xd5, 0x52, 0xd6, 0x0e, 0x23, 0x9f, 0x7b,
	0xf6, 0x66, 0x7c, 0x15, 0x83, 0x7e, 0x43, 0x6e, 0xea, 0x30, 0xda, 0x87, 0xd3, 0x20, 0x22, 0xa6,
	0xbc, 0x30, 0x56, 0x2c, 0x0e, 0xd9, 0x89, 0xf4, 0x3c, 0xeb, 0x67, 0x3a, 0x3d, 0x40, 0xca, 0x81,
	0x66, 0x74, 0x81, 0xd0, 0x0b, 0x5f, 0x48, 0xcf, 0x83, 0xdc, 0x62, 0x72, 0xb4, 0xf6, 0x33, 0x26,
	0x16, 0x7c, 0x7d, 0x79, 0x30, 0xba, 0xef, 0x97, 0x3a, 0x2e, 0x7c, 0x45, 0xac, 0xa9, 0x57, 0x8f,
	0xc3, 0xd1, 0xbe, 0x36, 0x9f, 0x89, 0xf7, 0xa6, 0x31, 0xe9, 0x36, 0x21, 0x2a, 0xf4, 0x42, 0xbd,
	0x67, 0xd6, 0xcf, 0xf1, 0x90, 0x2d, 0x01, 0x82, 0xdf, 0x47, 0x77, 0x49, 0x05, 0x5c, 0xbf, 0x72,
	0x22, 0x39, 0x84, 0x03, 0xe6, 0x8a, 0x0f, 0xd6, 0x37, 0xda, 0xe5, 0xf4, 0xc3, 0xb8, 0x8b, 0x70,
	0x13, 0x50, 0xfa, 0x39, 0xb9, 0x81, 0xa9, 0x23, 0x73, 0x3c, 0x1e, 0x64, 0x9d, 0xe2, 0xb7, 0x48,
	0xa7, 0x28, 0xac, 0x79, 0x3c, 0x48, 0x1d, 0xe2, 0xce, 0x53, 0x72, 0x5d, 0x6f, 0xdc, 0x02, 0x99,
	0x3b, 0x6e, 0x56, 0x3e, 0xa2, 0x2b, 0xa4, 0xf4, 0xa2, 0xd9, 0xae, 0x37, 0xdb, 0x2f, 0x19, 0x06,
	0xa4, 0x4a, 0x8e, 0x16, 0x49, 0xbe, 0xd9, 0x36, 0x4f, 0x73, 0x3b, 0x7f, 0x37, 0x95, 0x57, 0xea,
	0x13, 0x09, 0xf9, 0x0b, 0x6e, 0xd3, 0xa5, 0xfc, 0x05, 0x51, 0x1d, 0x55, 0x94, 0x08, 0x26, 0xf3,
	0x17, 0x0d, 0x34, 0x5d, 0x08, 0xcb, 0x46, 0x88, 0x41, 0xe7, 0x1a, 0x06, 0x1d, 0xa2, 0x21, 0x0c,
	0x3b, 0x5f, 0x8f, 0xbd, 0xe9, 0x3c, 0xba, 0x88, 0xbb, 0x33, 0x5c, 0xc4, 0xde, 0x4c, 0xcf, 0x9a,
	0x89, 0x73, 0xd7, 0x27, 0xe2, 0xdc, 0x1e, 0x59, 0x9d, 0xf0, 0x94, 0x60, 0xa4, 0x23, 0x85, 0x49,
	0x50, 0xde, 0x5e, 0xc9, 0x38, 0xc8, 0x2e, 0x0a, 0x20, 0xe9, 0xe5, 0x49, 0xd2, 0xbb, 0xa8, 0x93,
	0x5e, 0x6e, 0x92, 0xde, 0xdb, 0x84, 0x68, 0x0f, 0xc6, 0x06, 0xd2, 0xc5, 0x24, 0x71, 0xc1, 0x5e,
	0xd2, 0xc8, 0x4b, 0xe9, 0x6e, 0xbd, 0x25, 0x85, 0x6c, 0x0e, 0x4e, 0xc9, 0x3c, 0x7e, 0x66, 0x0e,
	0x3f, 0x13, 0xff, 0x86, 0xc9, 0x55, 0xb2, 0x4c, 0xbd, 0x3b, 0x8b, 0xca, 0xac, 0x33, 0x9b, 0x6c,
	0xcf, 0x4f, 0x24, 0xdb, 0x3b, 0x7f, 0x3f, 0x56, 0xc6, 0x61, 0xd8, 0xef, 0xff, 0xbf, 0x2b, 0x23,
	0xb3, 0x88, 0x3d, 0xfc, 0x7b, 0x5a, 0x19, 0xf7, 0x49, 0xd9, 0x19, 0xa9, 0x38, 0xf4, 0x31, 0x2e,
	0x25, 0x3a, 0x99, 0xb7, 0x8b, 0x1a, 0x85, 0x50, 0xa4, 0xd3, 0xd9, 0xcc, 0x76, 0x2e, 0x4c, 0x6d,
	0x27, 0x7d, 0x48, 0x96, 0xb3, 0x93, 0x38, 0x91, 0x83, 0xfa, 0x58, 0xb0, 0x4b, 0xe3, 0x59, 0x6a,
	0x91, 0x03, 0x3e, 0x30, 0xcb, 0xc3, 0xd2, 0x22, 0xe6, 0xfe, 0x10, 0x15, 0xb4, 0x68, 0xaf, 0x8e,
	0xd9, 0xbd, 0x44, 0xb4, 0xf5, 0x0d, 0x29, 0x64, 0x16, 0xfe, 0x67, 0xaa, 0x6a, 0xe7, 0xdf, 0xe7,
	0xc8, 0x72, 0xad, 0xa5, 0x06, 0x87, 0x82, 0x9f, 0xe3, 0x11, 0x47, 0x65, 0x14, 0x3c, 0x98, 0xd1,
	0x38, 0xc1, 0x9c, 0x4e, 0x39, 0x11, 0xd2, 0x84, 0xa6, 0xc9, 0xce, 0xb5, 0x7c, 0x0e, 0x9d, 0xe4,
	0x32, 0xe6, 0x75, 0x0c, 0xd6, 0xa6, 0x1d, 0xe3, 0xa6, 0x7e, 0xae, 0xb6, 0x1a, 0xf6, 0xf1, 0x61,
	0xa3, 0xcb, 0xba, 0xbd, 0x6a, 0xaf, 0xc1, 0x9a, 0xed, 0x66, 0x4f, 0x67, 0xf2, 0x7a, 0xaa, 0x47,
	0x64, 0xd9, 0xc3, 0x57, 0x33, 0x57, 0xc4, 0xc2, 0x89, 0x85, 0x8b, 0xea, 0xcb, 0xdb, 0x65, 0x0d,
	0xd7, 0x0d, 0x4a, 0x9f, 0x92, 0xb5, 0x13, 0x19, 0xa9, 0x98, 0xf5, 0xbd, 0x30, 0x74, 0xd9, 0x29,
	0x1f, 0x0e, 0x45, 0x20, 0x5c, 0x63, 0x5f, 0x14, 0x65, 0x07, 0x20, 0x7a, 0x65, 0x24, 0xb0, 0x99,
	0xae, 0x54, 0x0e, 0x8f, 0x4c, 0x92, 0xce, 0x22, 0xa1, 0x46, 0x5e, 0xac, 0x50, 0x81, 0x79, 0x7b,
	0xd5, 0x08, 0xd1, 0x23, 0xda, 0x5a, 0x04, 0xcb, 0xf1, 0xb9, 0x52, 0x90, 0xa8, 0x39, 0x61, 0x10,
	0x08, 0x27, 0x36, 0xa7, 0xab, 0x0c, 0x70, 0x3d, 0x45, 0x77, 0xfe, 0x93, 0x90, 0x4a, 0x2d, 0x35,
	0x20, 0xb3, 0xf7, 0x6b, 0x64, 0xce, 0xd8, 0xef, 0x82, 0xb1, 0xdf, 0x39, 0xe9, 0xc2, 0x71, 0x3e,
	0x15, 0x51, 0x98, 0x6c, 0x7e, 0xc9, 0x5e, 0x80, 0xc7, 0xa6, 0x4b, 0xbf, 0x26, 0xf3, 0xa0, 0x05,
	0xfc, 0xe0, 0xf2, 0xb3, 0x92, 0xd9, 0xc0, 0x1a, 0xeb, 0x35, 0xaa, 0xad, 0xfd, 0xf5, 0xec, 0x13,
	0x7b, 0x79, 0x74, 0x54, 0x67, 0x2f, 0x8f, 0xdf, 0x75, 0x6d, 0x1c, 0x92, 0x6a, 0x79, 0x21, 0xa3,
	0x65, 0x4a, 0xe6, 0x21, 0x76, 0x98, 0x3a, 0x06, 0xff, 0x06, 0xcd, 0xa7, 0x45, 0x5a, 0x11, 0xed,
	0x36, 0x2d, 0xcf, 0xb0, 0x02, 0x8b, 0xb9, 0x09, 0xcb, 0x25, 0x5d, 0x62, 0x01, 0xa2, 0xc3, 0xf1,
	0x06, 0x1c, 0x99, 0x98, 0xb3, 0x0f, 0x43, 0xab, 0xac, 0x57, 0x0d, 0x8f, 0x3f, 0x0e, 0xc1, 0x96,
	0x8d, 0x80, 0xf1, 0xf7, 0x3c, 0x72, 0x85, 0x6b, 0x2d, 0x23, 0xa1, 0xa4, 0x09, 0x55, 0x0d, 0xd2,
	0xef, 0x49, 0xc9, 0x68, 0xd6, 0xb8, 0xa9, 0x8a, 0xa9, 0xd5, 0x70, 0xd7, 0x52, 0x73, 0x1b, 0x29,
	0x16, 0xef, 0x57, 0xf0, 0x63, 0x0f, 0x1b, 0xd5, 0x37, 0x49, 0xf1, 0x5e, 0xf4, 0x32, 0x0c, 0xfa,
	0x80, 0x18, 0x73, 0x60, 0xdc, 0x89, 0x65, 0x18, 0x28, 0xeb, 0x96, 0x7e, 0xa5, 0x46, 0xab, 0x1a,
	0xa4, 0x16, 0x59, 0x74, 0x4e, 0x79, 0x10, 0x08, 0xcf, 0x5a, 0x41, 0x79, 0xf2, 0x08, 0x8b, 0x1e,
	0x46, 0xf2, 0xb7, 0x10, 0xe0, 0x4f, 0x4c, 0x44, 0xa2, 0x7a, 0x06, 0x84, 0xeb, 0xe2, 0x44, 0x07,
	0xa4, 0x5d, 0x52, 0x49, 0x73, 0xf4, 0x44, 0x69, 0x6b, 0x98, 0xb3, 0x96, 0x13, 0xfc, 0x95, 0x56,
	0x5e, 0x97, 0xac, 0x25, 0x6d, 0x89, 0x24, 0x6e, 0x65, 0xea, 0xa4, 0x3f, 0xa1, 0x3d, 0x41, 0x87,
	0x97, 0x18, 0xb0, 0x4c, 0x11, 0x4c, 0xbe, 0x7d, 0x1d, 0xdf, 0x5e, 0x32, 0xb0, 0x79, 0x79, 0x95,
	0x10, 0xf4, 0xae, 0x0c, 0xed, 0x67, 0x63, 0x96, 0xfd, 0xac, 0x4e, 0xd8, 0x4f, 0xfb, 0x08, 0xfe,
	0xb3, 0x97, 0x70, 0x54, 0x0f, 0x2c, 0xe8, 0x11, 0xa9, 0x04, 0xe2, 0x43, 0x18, 0xb0, 0xa1, 0xc3,
	0xfa, 0x3c, 0x18, 0xb0, 0x20, 0x34, 0x55, 0x4c, 0x09, 0xf1, 0x8e, 0x73, 0xc0, 0x83, 0x41, 0x3b,
	0xa4, 0x4f, 0x08, 0x9d, 0x22, 0x82, 0xe1, 0x6d, 0xa2, 0xe1, 0x2d, 0x67, 0xa9, 0x60, 0x83, 0xaf,
	0x08, 0xf9, 0x30, 0x64, 0xfd, 0x30, 0x18, 0x29, 0xac, 0x33, 0xc0, 0xd7, 0xfe, 0x64, 0x6f, 0xfa,
	0xa0, 0x5c, 0x02, 0x7e, 0xec, 0x1c, 0xc0, 0x10, 0x7b, 0xe9, 0xc3, 0xf0, 0x40, 0x8f, 0x05, 0x27,
	0x14, 0xf1, 0xe0, 0x8c, 0x81, 0x06, 0x07, 0xc2, 0xba, 0xbd, 0x9d, 0xdb, 0x5d, 0xb1, 0x09, 0x40,
	0x35, 0x44, 0xe8, 0x2d, 0xb2, 0xe4, 0x70, 0x5f, 0x44, 0xdc, 0xe7, 0x01, 0xd6, 0x1e, 0x79, 0x7b,
	0x0c, 0x40, 0xcd, 0x9b, 0xf5, 0xa4, 0xc3, 0x28, 0x74, 0x47, 0x4e, 0x8c, 0xcd, 0x06, 0x5d, 0x83,
	0xac, 0x8d, 0x7d, 0x69, 0x47, 0x0b, 0x9b, 0xae, 0xa2, 0x3f, 0x23, 0x9b, 0xda, 0xf5, 0xf9, 0xe7,
	0x43, 0x76, 0x1e, 0xc6, 0x22, 0x9b, 0x94, 0xe8, 0xca, 0xfe, 0x06, 0x12, 0x5a, 0xe7, 0xc3, 0x37,
	0x61, 0x2c, 0xc6, 0x85, 0x5a, 0x93, 0xac, 0x28, 0xc1, 0x23, 0x6c, 0x8f, 0xa5, 0x45, 0xf3, 0xc7,
	0x7f, 0x4a, 0xd1, 0xbc, 0xac, 0xc7, 0xa5, 0x1c, 0x74, 0x75, 0xfc, 0x1c, 0x02, 0xb9, 0x40, 0x05,
	0xb3, 0x21, 0xa4, 0xbc, 0x2e, 0x16, 0x42, 0xf3, 0x36, 0x4d, 0x64, 0xa0, 0xc6, 0x0e, 0x4a, 0x20,
	0x31, 0x90, 0x0a, 0xf2, 0x02, 0x70, 0xca, 0xa3, 0x3e, 0x64, 0x5e, 0x7d, 0x11, 0x59, 0xf7, 0x75,
	0x62, 0x20, 0x55, 0x07, 0x24, 0xdd, 0x54, 0x00, 0xd1, 0x14, 0x37, 0x37, 0x96, 0x22, 0xb2, 0x1e,
	0xe0, 0xd6, 0xe6, 0x01, 0xe8, 0x49, 0x11, 0x6d, 0x0d, 0xc8, 0xc6, 0x15, 0xfa, 0x01, 0x17, 0x93,
	0xf6, 0xe0, 0x4a, 0x36, 0xfe, 0x0d, 0x2e, 0x26, 0x51, 0x39, 0xfa, 0xb7, 0x39, 0x7b, 0xd1, 0x68,
	0x51, 0xe7, 0x89, 0xa3, 0xc8, 0x11, 0xec, 0x4c, 0x5c, 0xa0, 0x9b, 0x9b, 0x87, 0x3c, 0x11, 0x90,
	0xd7, 0xe2, 0x62, 0xe7, 0x1f, 0xe7, 0xc9, 0x4a, 0x0d, 0xdf, 0x02, 0x9f, 0x52, 0x17, 0x31, 0x97,
	0x9e, 0x9a, 0x2c, 0xe6, 0x73, 0x53, 0xc5, 0xfc, 0x26, 0xc1, 0xbf, 0x59, 0xcc, 0x07, 0x26, 0xcc,
	0x63, 0xaa, 0xd4, 0xe3, 0x83, 0x6c, 0xd6, 0x34, 0x3f, 0xb3, 0x3b, 0x80, 0x95, 0xbd, 0x0e, 0xde,
	0x38, 0xc9, 0x15, 0xb5, 0xff, 0xc2, 0x8c, 0xda, 0x7f, 0x97, 0x54, 0x0c, 0x2b, 0x80, 0x03, 0x8f,
	0xbc, 0x45, 0xe4, 0x95, 0x35, 0x0f, 0x60, 0x64, 0xde, 0x23, 0x25, 0x9d, 0xd0, 0x86, 0xfe, 0xd0,
	0x13, 0xb1, 0xc0, 0xc8, 0x9d, 0xd7, 0xd3, 0xd5, 0x0c, 0x86, 0xdd, 0x2d, 0xac, 0x9a, 0xf1, 0x1b,
	0x97, 0xf0, 0x3b, 0x96, 0x10, 0xc1, 0x8f, 0xbc, 0x49, 0xf4, 0x03, 0x7e, 0x25, 0xd1, 0x3b, 0x80,
	0x00, 0x7c, 0xe6, 0x26, 0xc9, 0xa7, 0x15, 0xb7, 0xee, 0xf5, 0x2c, 0x0e, 0x4c, 0xb5, 0x9d, 0x4e,
	0x8b, 0xeb, 0xd3, 0xee, 0x5e, 0xcf, 0x84, 0x4b, 0x7b, 0x48, 0x96, 0xb5, 0x78, 0xfc, 0xad, 0x25,
	0xe4, 0x94, 0x10, 0x4e, 0x3f, 0xf6, 0x31, 0x59, 0x49, 0x78, 0xe3, 0xaf, 0x2d, 0x23, 0x73, 0xd9,
	0x30, 0xd3, 0xcf, 0xa5, 0x64, 0x1e, 0xec, 0xc6, 0x44, 0x00, 0xfc, 0x7b, 0xfa, 0xe4, 0x56, 0x2e,
	0x9d, 0xdc, 0x6d, 0x52, 0x94, 0x8a, 0x9d, 0x86, 0xbe, 0x36, 0x6f, 0xf4, 0xd5, 0x79, 0x9b, 0x48,
	0xf5, 0x2a, 0xf4, 0xd1, 0xaa, 0x77, 0xfe, 0x2b, 0x47, 0x2c, 0x63, 0x19, 0xd2, 0x17, 0xae, 0x2d,
	0x20, 0xa6, 0x24, 0x06, 0x72, 0x9f, 0x94, 0x65, 0x2c, 0xfc, 0x8c, 0x2b, 0xd7, 0x61, 0xb5, 0x08,
	0x68, 0xea, 0xc9, 0x1f, 0x92, 0x65, 0xa9, 0x98, 0x1a, 0x0d, 0x87, 0xde, 0x05, 0x73, 0x22, 0x48,
	0x54, 0x74, 0x62, 0x51, 0x92, 0xaa, 0x8b, 0x68, 0x0d, 0x40, 0xba, 0x43, 0x4a, 0x52, 0x61, 0xa6,
	0xe5, 0x32, 0x37, 0x0a, 0x87, 0x26, 0xa1, 0x28, 0x48, 0x85, 0xaf, 0xae, 0x47, 0xe1, 0x10, 0x36,
	0x36, 0xe3, 0x06, 0x74, 0x4e, 0xbe, 0xc4, 0xd3, 0xa3, 0xbf, 0x4e, 0x16, 0xc2, 0x48, 0x0e, 0x64,
	0x60, 0x9a, 0xb9, 0xe6, 0x69, 0xe7, 0x5f, 0x73, 0x64, 0x4b, 0x7f, 0xc5, 0x41, 0x14, 0x72, 0xd7,
	0xe1, 0x2a, 0xae, 0xe9, 0x78, 0xd4, 0x0c, 0x4e, 0x42, 0x98, 0xd5, 0x84, 0xa7, 0x24, 0xeb, 0x2d,
	0xd9, 0x4b, 0x06, 0x69, 0xba, 0xf4, 0x63, 0x52, 0xc4, 0x17, 0x44, 0x17, 0xd8, 0x92, 0xc6, 0x8f,
	0x5c, 0xb2, 0x0b, 0x06, 0xab, 0x85, 0x2e, 0x6c, 0x64, 0xc1, 0x15, 0xba, 0xcc, 0x92, 0x61, 0x60,
	0x0e, 0x44, 0x16, 0x02, 0x73, 0x4c, 0x1a, 0x3c, 0x7a, 0x96, 0x79, 0xe4, 0x14, 0x13, 0x10, 0xa6,
	0xd9, 0xf9, 0x97, 0x47, 0x69, 0x6b, 0x17, 0x57, 0x0b, 0xd9, 0xb8, 0xf6, 0x82, 0xd3, 0xd9, 0x38,
	0xa2, 0x4d, 0x97, 0x3e, 0x19, 0xe7, 0xd3, 0x73, 0xe8, 0xe3, 0x57, 0x2e, 0xb9, 0xf4, 0x71, 0x06,
	0xfd, 0x05, 0x29, 0x7a, 0xe2, 0x24, 0x66, 0xc9, 0x88, 0xc5, 0xab, 0x46, 0x14, 0x80, 0xd6, 0x32,
	0xa3, 0x26, 0xba, 0xc7, 0x85, 0xa9, 0xee, 0xf1, 0x1d, 0xa8, 0x06, 0xa2, 0x73, 0x2d, 0xc4, 0x6c,
	0x7b, 0x3f, 0xf7, 0x14, 0x0a, 0x02, 0xc0, 0xf4, 0x91, 0x4f, 0xdb, 0xc7, 0xb8, 0x2d, 0x25, 0x3b,
	0x9f, 0x74, 0x8f, 0x21, 0xc7, 0x1b, 0x8a, 0xc0, 0x95, 0xc1, 0x20, 0x6d, 0xe2, 0x10, 0xec, 0x3f,
	0x97, 0x0d, 0x9c, 0xb4, 0x6c, 0xd2, 0x2e, 0xf3, 0xfc, 0x64, 0x97, 0x19, 0xd7, 0x7c, 0xb9, 0xcb,
	0x0c, 0xd9, 0x87, 0xc9, 0x19, 0xaf, 0x6b, 0xd7, 0x64, 0x1e, 0xe9, 0x77, 0x44, 0x67, 0xcf, 0x3a,
	0x28, 0x14, 0x71, 0xb6, 0x8d, 0xc9, 0xd9, 0xb4, 0xb1, 0x43, 0x84, 0x58, 0x6c, 0xb6, 0xdf, 0x54,
	0x0f, 0x9b, 0x75, 0x7b, 0xc9, 0x4b, 0x30, 0xb0, 0x05, 0xee, 0x41, 0xe9, 0xe7, 0x9c, 0x0a, 0x1e,
	0x2b, 0x3c, 0xb7, 0x79, 0xbb, 0x80, 0x58, 0x0d, 0x21, 0x38, 0x15, 0x27, 0xd2, 0xf3, 0xd8, 0x7b,
	0x19, 0x9f, 0xb2, 0x7e, 0x18, 0x2b, 0x3c, 0xb2, 0x79, 0xbb, 0x08, 0xe8, 0x5b, 0x19, 0x9f, 0x1e,
	0x84, 0xb1, 0xd2, 0x75, 0x4a, 0x1c, 0x85, 0x7a, 0x67, 0x96, 0x75, 0xd4, 0x44, 0x04, 0xb7, 0x26,
	0xd9, 0x37, 0xf4, 0x4b, 0x15, 0xe3, 0x79, 0xb8, 0x2f, 0xd0, 0x2d, 0x7d, 0x69, 0x1a, 0xa9, 0xae,
	0x3e, 0x87, 0xd6, 0x0a, 0xea, 0x91, 0xee, 0x5d, 0x72, 0xe1, 0x76, 0x21, 0xce, 0xf8, 0xf3, 0x47,
	0x64, 0x39, 0x1e, 0xc5, 0x61, 0x24, 0xb9, 0xc7, 0x3c, 0xa1, 0x54, 0x18, 0x98, 0xd4, 0xab, 0x9c,
	0xc0, 0x87, 0x88, 0xa6, 0x57, 0x17, 0x69, 0x0b, 0x6b, 0x35, 0x73, 0x75, 0x91, 0x74, 0xae, 0x3e,
	0x21, 0x34, 0x43, 0x4a, 0x4a, 0xb2, 0x35, 0xdd, 0x3c, 0x1f, 0x4b, 0x4c, 0x59, 0xf6, 0x90, 0x94,
	0x8c, 0x9d, 0xe8, 0xde, 0x19, 0x66, 0x67, 0x25, 0xb0, 0x95, 0xa2, 0xc6, 0x6d, 0x84, 0xa7, 0x0a,
	0x9a, 0xf5, 0xff, 0x4d, 0x41, 0xf3, 0x80, 0x94, 0x83, 0x91, 0xcf, 0xd4, 0x50, 0x38, 0x31, 0x8f,
	0xc3, 0x48, 0x99, 0x5e, 0x75, 0x29, 0x18, 0xf9, 0xdd, 0x14, 0xa4, 0x77, 0x4c, 0x73, 0x1d, 0xeb,
	0x5b, 0xd3, 0x03, 0xce, 0x20, 0xf4, 0x39, 0x59, 0x74, 0x7c, 0x36, 0x94, 0xce, 0x19, 0xa6, 0xba,
	0x69, 0x7a, 0x57, 0x6b, 0xb1, 0x4e, 0xb3, 0xf6, 0x7a, 0xbf, 0x9c, 0x3c, 0xd9, 0xd5, 0x76, 0xfd,
	0xa8, 0x65, 0x2f, 0x38, 0x7e, 0x47, 0x3a, 0x67, 0x10, 0x1e, 0x74, 0xfe, 0x61, 0x1a, 0xb2, 0xf3,
	0xf6, 0x22, 0x3e, 0x37, 0x5d, 0xfa, 0x19, 0xa9, 0x68, 0x23, 0x32, 0x6b, 0x93, 0xc1, 0xc0, 0xba,
	0x0b, 0x16, 0xb0, 0x3f, 0x1f, 0x47, 0x23, 0x61, 0x2f, 0xa3, 0xb4, 0x9b, 0x0a, 0xe9, 0xaf, 0xc8,
	0xfa, 0x64, 0x0b, 0x9f, 0x45, 0xdc, 0x95, 0x3c, 0x88, 0x31, 0xb1, 0x98, 0xdd, 0xca, 0x5f, 0x9d,
	0x6a, 0xe5, 0xbf, 0xaa, 0xda, 0x75, 0x7b, 0x6d, 0xa2, 0x8f, 0x6f, 0xeb, 0x49, 0x68, 0x93, 0x14,
	0x71, 0xd3, 0xcf, 0x45, 0xa4, 0x40, 0x37, 0x0f, 0x70, 0xd2, 0x0a, 0x4e, 0x0a, 0xbb, 0xfe, 0x46,
	0xe3, 0xfb, 0x6b, 0xb0, 0xe5, 0xec, 0x4d, 0xc3, 0xee, 0x36, 0x8f, 0xda, 0xac, 0x76, 0x6c, 0xdb,
	0x8d, 0x76, 0xcf, 0x2e, 0x0c, 0xc6, 0x14, 0xfa, 0x9a, 0xac, 0x69, 0x0f, 0x1e, 0x61, 0xa4, 0x48,
	0x4d, 0xf4, 0x21, 0x9a, 0xe8, 0xe6, 0xde, 0x55, 0xb1, 0xc4, 0xa6, 0xf1, 0xe5, 0xf8, 0x82, 0x35,
	0x93, 0x52, 0x98, 0xb3, 0x3c, 0xd2, 0x07, 0x19, 0x9e, 0x5f, 0x8b, 0x0b, 0xba, 0x45, 0xc0, 0x07,
	0x0d, 0x46, 0x42, 0xba, 0xd6, 0x63, 0xed, 0x56, 0x92, 0x67, 0xfa, 0x25, 0xb9, 0x31, 0x14, 0x01,
	0x87, 0x6d, 0xc2, 0x92, 0x2a, 0xdd, 0xac, 0x27, 0x89, 0xcd, 0xad, 0x1a, 0x39, 0x16, 0x58, 0xc9,
	0x2e, 0x7c, 0x46, 0xe8, 0xe4, 0x30, 0x57, 0x46, 0x42, 0x77, 0x7c, 0x61, 0x4c, 0x25, 0x3b, 0xa6,
	0x2e, 0x23, 0x8c, 0x9e, 0x5e, 0xc8, 0xdd, 0xd4, 0xf6, 0x3f, 0x4d, 0xca, 0x73, 0xee, 0x1a, 0xab,
	0xc7, 0x76, 0x48, 0x24, 0x85, 0xd2, 0xfe, 0x66, 0x4f, 0x13, 0x34, 0x84, 0xee, 0x64, 0x8f, 0xac,
	0x9a, 0xc5, 0x31, 0x43, 0x7c, 0x2f, 0x03, 0x95, 0xb4, 0x7f, 0x8d, 0xa8, 0x8b, 0x92, 0xb7, 0x32,
	0x50, 0xba, 0x2a, 0x8a, 0xc4, 0x04, 0x59, 0x77, 0x7e, 0xcb, 0x80, 0x67, 0x98, 0x50, 0xa8, 0x85,
	0x61, 0xcc, 0x06, 0x22, 0x10, 0x10, 0x5e, 0x5d, 0xd3, 0xef, 0x2d, 0x01, 0xfa, 0x32, 0x01, 0xc1,
	0x9f, 0x21, 0x2d, 0x29, 0x20, 0x75, 0x8b, 0xb7, 0x00, 0x58, 0x52, 0x3e, 0xde, 0x25, 0x8b, 0xdc,
	0xf3, 0x9c, 0x53, 0x1e, 0xe3, 0x8d, 0x4e, 0x7e, 0xff, 0xfa, 0x09, 0xf7, 0x94, 0xb0, 0x13, 0x94,
	0x36, 0x48, 0x09, 0x6f, 0x92, 0xe3, 0x73, 0xe6, 0x0a, 0x8f, 0x5f, 0xe0, 0xa5, 0x4d, 0xf9, 0xd9,
	0x8a, 0x76, 0xa5, 0xf5, 0x30, 0xe6, 0xbd, 0x37, 0x75, 0x10, 0xec, 0x97, 0x33, 0x08, 0xfb, 0xfc,
	0xa9, 0x5d, 0x80, 0x71, 0xbd, 0x73, 0x14, 0xc2, 0xb7, 0x65, 0x0b, 0x05, 0xf4, 0x8b, 0xcf, 0x51,
	0xeb, 0xe5, 0x71, 0x85, 0x80, 0xce, 0x71, 0xdc, 0xc4, 0xf1, 0xf9, 0x50, 0xbb, 0xc8, 0xaf, 0x90,
	0x68, 0x9a, 0x38, 0x2d, 0x3e, 0x44, 0x3f, 0xf9, 0x84, 0xac, 0x18, 0x5e, 0xe6, 0xf2, 0x4b, 0xf7,
	0x71, 0xcd, 0xab, 0x32, 0x77, 0x5a, 0x15, 0x72, 0xcd, 0xe3, 0x01, 0x76, 0x6a, 0xf3, 0x36, 0xfc,
	0x49, 0x7f, 0x20, 0xeb, 0xfd, 0x24, 0x5d, 0x60, 0x69, 0x82, 0x10, 0x9c, 0x84, 0xd6, 0x3e, 0x5a,
	0xf3, 0xcd, 0xbd, 0xab, 0x73, 0x0a, 0x7b, 0xad, 0x3f, 0x2b, 0xd3, 0xf8, 0x82, 0xac, 0xeb, 0xde,
	0x49, 0x5a, 0x44, 0x63, 0x16, 0x21, 0x5d, 0xec, 0xdd, 0x96, 0x6c, 0xdd, 0x59, 0x39, 0x34, 0xb5,
	0xb4, 0x91, 0xe9, 0x96, 0x1b, 0x2a, 0x5c, 0xba, 0xa6, 0x7f, 0x9b, 0xd7, 0x40, 0xd3, 0x68, 0x70,
	0xdc, 0x8a, 0xc4, 0x86, 0x6d, 0x1e, 0x34, 0x98, 0xf6, 0x20, 0xe9, 0x2f, 0x48, 0x59, 0x7c, 0x88,
	0x23, 0xce, 0x92, 0x1f, 0x00, 0x58, 0xbf, 0xc0, 0x0f, 0x98, 0x8a, 0x7c, 0xb5, 0x06, 0x90, 0x5a,
	0x6a, 0x60, 0x97, 0x90, 0xde, 0x32, 0x6c, 0xfa, 0x84, 0x2c, 0x29, 0x7e, 0x2e, 0x50, 0x2f, 0xd6,
	0x77, 0xdb, 0xb9, 0xdd, 0xc2, 0xb3, 0xb2, 0x4e, 0x1a, 0xba, 0xfc, 0x5c, 0x80, 0x5a, 0xec, 0xbc,
	0x32, 0x7f, 0x5d, 0xd9, 0x1e, 0xaa, 0x5e, 0xd9, 0x1e, 0x3a, 0x24, 0x25, 0xed, 0x29, 0xc3, 0x51,
	0xec, 0x84, 0xbe, 0xb0, 0x5e, 0xa0, 0xfd, 0x94, 0xf7, 0x1a, 0x58, 0x89, 0x1d, 0x69, 0x74, 0x7f,
	0xe3, 0x8c, 0x4d, 0x00, 0xec, 0x38, 0x38, 0x0b, 0xc2, 0xf7, 0x81, 0x5d, 0xf4, 0x33, 0xe8, 0xac,
	0xc6, 0x51, 0x6d, 0x56, 0xe3, 0x68, 0x46, 0x3f, 0xb1, 0x3e, 0xa3, 0x9f, 0xf8, 0x09, 0xa1, 0x89,
	0xad, 0xc9, 0x80, 0x0d, 0x3d, 0x7e, 0x01, 0x99, 0xd3, 0xcb, 0xac, 0x11, 0xb5, 0x64, 0xd0, 0xd1,
	0x78, 0x96, 0xcd, 0x3f, 0xa4, 0xec, 0x57, 0x13, 0x6c, 0xfe, 0x21, 0x61, 0x4f, 0xff, 0xa0, 0xa2,
	0xf9, 0x3f, 0xfa, 0x41, 0x45, 0x95, 0xdc, 0xf1, 0x78, 0xc0, 0x4e, 0x43, 0x15, 0x9b, 0xdf, 0x41,
	0x84, 0x6c, 0x32, 0xd6, 0x7e, 0x6f, 0xee, 0xed, 0x78, 0xf0, 0x2a, 0x54, 0x31, 0xfe, 0x1e, 0x22,
	0xec, 0x66, 0xa3, 0x6e, 0x87, 0x90, 0x73, 0xa9, 0x64, 0x5f, 0x7a, 0x60, 0x41, 0xaf, 0x71, 0x19,
	0x6b, 0x7b, 0xa9, 0x65, 0xbc, 0x49, 0x65, 0xfb, 0x5b, 0x33, 0x40, 0xd6, 0x19, 0xf5, 0x3d, 0xe9,
	0xd8, 0x99, 0x39, 0x66, 0xf5, 0x59, 0x0f, 0x67, 0xf5, 0x59, 0x0f, 0xc8, 0x9d, 0x2c, 0x8f, 0x8f,
	0xe2, 0x90, 0x39, 0x91, 0x00, 0xdf, 0xc4, 0x30, 0xeb, 0xb2, 0x5a, 0xa8, 0xbc, 0xad, 0xf1, 0xb0,
	0xea, 0x28, 0x0e, 0x6b, 0x9a, 0xa2, 0x93, 0xe4, 0x5d, 0x52, 0xd1, 0xbe, 0x9f, 0x8d, 0x4f, 0x49,
	0x5b, 0x3b, 0x45, 0x8d, 0x77, 0x93, 0xb3, 0x72, 0x9f, 0x18, 0x24, 0x55, 0xf9, 0x91, 0xce, 0x6c,
	0x34, 0x6a, 0x54, 0x7e, 0x65, 0xef, 0xb7, 0x73, 0x65, 0xef, 0x97, 0x3e, 0x27, 0x1b, 0xc3, 0x48,
	0x9c, 0xcb, 0x70, 0xa4, 0x92, 0x55, 0xa0, 0x55, 0x0a, 0x65, 0xfd, 0xb0, 0x7d, 0x6d, 0x77, 0xde,
	0xbe, 0x91, 0x88, 0xf5, 0x62, 0x5a, 0x5a, 0x38, 0x31, 0xce, 0x1c, 0x82, 0x73, 0x11, 0x45, 0xd2,
	0x15, 0x96, 0x8d, 0xd6, 0x98, 0x8e, 0xd3, 0xa6, 0x6f, 0x84, 0xf4, 0x05, 0xd9, 0xce, 0xae, 0x71,
	0xa4, 0x84, 0x4a, 0x1b, 0x24, 0x91, 0x70, 0xc2, 0xc8, 0x55, 0x56, 0x17, 0x77, 0xee, 0xd6, 0x78,
	0xb9, 0xc7, 0x4a, 0x28, 0x63, 0x54, 0xb6, 0xe6, 0x60, 0x29, 0x6a, 0xf2, 0xad, 0xe4, 0xc2, 0xe9,
	0xad, 0x8e, 0x13, 0x26, 0x91, 0x32, 0x17, 0x4d, 0xbf, 0x24, 0xa5, 0x21, 0x1f, 0x29, 0xd8, 0xe2,
	0x18, 0xf3, 0x95, 0x1f, 0xd1, 0x48, 0xd6, 0xc7, 0x3e, 0xbe, 0x03, 0xe2, 0xae, 0x96, 0xee, 0xdf,
	0x9d, 0x09, 0xb3, 0xe3, 0xc0, 0x93, 0xbe, 0x8c, 0x85, 0x6b, 0x17, 0x87, 0x19, 0x9c, 0x7e, 0x46,
	0xd6, 0xc6, 0xcd, 0x9e, 0x4c, 0x81, 0xf7, 0x4e, 0xc7, 0xc1, 0xa4, 0xcf, 0x33, 0xee, 0xf1, 0x7c,
	0x4b, 0x6e, 0xbe, 0x17, 0xe2, 0x4c, 0x04, 0x2e, 0x9b, 0x75, 0x7d, 0xfa, 0x17, 0xfa, 0xba, 0xd1,
	0x50, 0x7a, 0x97, 0x6e, 0x51, 0x67, 0x0c, 0xcf, 0xde, 0x8c, 0xfe, 0xe5, 0xac, 0xe1, 0x99, 0x0b,
	0xd2, 0x2a, 0xb9, 0x3d, 0x3d, 0x7c, 0xf2, 0xa2, 0xf4, 0x97, 0xfa, 0xa7, 0x00, 0x93, 0x13, 0x4c,
	0xdc, 0x97, 0xbe, 0x25, 0xab, 0x53, 0x19, 0x1d, 0x66, 0x1b, 0xbf, 0xfa, 0xf3, 0xd2, 0xb9, 0x95,
	0x89, 0x74, 0x0e, 0x93, 0x92, 0xbb, 0xa4, 0x00, 0x13, 0x27, 0x29, 0xcf, 0x5f, 0xe9, 0xdf, 0x58,
	0xf4, 0xc3, 0x38, 0x49, 0x73, 0x36, 0x49, 0x5e, 0xbf, 0x39, 0x12, 0x16, 0xd3, 0x79, 0x29, 0xce,
	0x12, 0x09, 0x5a, 0x23, 0x9b, 0xfa, 0x37, 0x48, 0xc3, 0x28, 0x1c, 0x44, 0x42, 0xe1, 0x76, 0x9a,
	0x7e, 0xa7, 0xf5, 0xd7, 0xdb, 0xd7, 0x76, 0xcb, 0xcf, 0x16, 0xf7, 0x1a, 0x0d, 0xa0, 0xd8, 0x1b,
	0xc8, 0xec, 0x8c, 0x89, 0x0d, 0xcd, 0xa3, 0xbf, 0x25, 0x96, 0xbe, 0x32, 0xc7, 0xdf, 0x59, 0x25,
	0x17, 0x64, 0xd1, 0xc8, 0x13, 0xca, 0xe2, 0xe6, 0x16, 0x17, 0x43, 0x47, 0x42, 0x4a, 0xc2, 0x94,
	0x0d, 0x94, 0xfd, 0x7b, 0x67, 0xec, 0x6a, 0x29, 0x6b, 0xf1, 0x60, 0xc4, 0x3d, 0x7b, 0x5d, 0xcd,
	0x14, 0xd3, 0x77, 0xe4, 0xb1, 0x39, 0x7c, 0x99, 0xc3, 0x78, 0x69, 0x2d, 0x49, 0x73, 0xaa, 0x8f,
	0x5a, 0x7a, 0xa0, 0x47, 0x74, 0xd2, 0xe3, 0x39, 0x35, 0x73, 0x4f, 0xf7, 0xae, 0xde, 0x92, 0x9f,
	0x98, 0xa9, 0x9d, 0x51, 0x14, 0x09, 0x4c, 0xd8, 0xae, 0x9c, 0xd9, 0xc1, 0x99, 0xef, 0xeb, 0x01,
	0x35, 0xcd, 0xbf, 0x6a, 0xe2, 0x7f, 0xc8, 0x91, 0x7b, 0x53, 0x33, 0x4f, 0xce, 0xe7, 0x9c, 0x86,
	0xd2, 0x11, 0x96, 0x8b, 0x7b, 0x77, 0x6b, 0xf6, 0xde, 0xd5, 0x90, 0xb3, 0xff, 0xe0, 0x8a, 0xcd,
	0xd3, 0x62, 0xd6, 0x0c, 0xce, 0xb9, 0x27, 0x5d, 0xfb, 0xee, 0xc4, 0xc2, 0xb2, 0xeb, 0xd1, 0x44,
	0xfa, 0x4f, 0x39, 0xf2, 0x68, 0x6a, 0x4d, 0xc1, 0xa5, 0xef, 0x34, 0xeb, 0x12, 0xff, 0x77, 0xeb,
	0xda, 0x99, 0x58, 0x57, 0x7b, 0x72, 0xab, 0xcc, 0xd2, 0x5c, 0xf2, 0xf4, 0x8f, 0xeb, 0x61, 0xa4,
	0x84, 0xcb, 0x9c, 0x50, 0x06, 0x2c, 0x0e, 0x95, 0xb2, 0x4e, 0xd0, 0x11, 0x3e, 0xfe, 0xc3, 0xea,
	0x38, 0x56, 0xc2, 0xad, 0x85, 0x32, 0xe8, 0x85, 0x4a, 0xd1, 0xef, 0x21, 0x04, 0xa4, 0xca, 0xf0,
	0x79, 0x74, 0xc1, 0xd0, 0xde, 0xad, 0x01, 0x7e, 0x6d, 0x72, 0x0a, 0xf6, 0x4b, 0x8d, 0x37, 0x8d,
	0x76, 0x8f, 0x35, 0xeb, 0x3a, 0x2e, 0xaf, 0x3a, 0xe9, 0x96, 0xc2, 0x18, 0xe4, 0x40, 0x16, 0xea,
	0x85, 0xef, 0x87, 0x91, 0x64, 0xae, 0x18, 0x46, 0xc2, 0xc1, 0x64, 0xfc, 0x14, 0x97, 0x54, 0xd1,
	0x82, 0x7a, 0x8a, 0x6f, 0x7d, 0x45, 0x96, 0xd2, 0x34, 0x8c, 0x96, 0xd3, 0x5b, 0xac, 0x12, 0xde,
	0x5f, 0x6d, 0x91, 0xbc, 0x13, 0x06, 0xb1, 0x08, 0x62, 0xdd, 0xe0, 0x2d, 0xda, 0xe9, 0xf3, 0x8e,
	0x3b, 0x7d, 0x1b, 0x5f, 0x20, 0x8b, 0x76, 0xa3, 0x5a, 0x7f, 0x77, 0xdc, 0xa9, 0xcc, 0xd3, 0x65,
	0x52, 0xe8, 0x36, 0x6c, 0xa8, 0xdc, 0x1a, 0xbd, 0xe3, 0x4e, 0x25, 0x47, 0x17, 0xc9, 0x35, 0xfb,
	0xb8, 0x5d, 0x99, 0xa3, 0x45, 0x92, 0xef, 0x1c, 0x75, 0x7b, 0x50, 0xd9, 0x55, 0xae, 0xc1, 0x53,
	0xfb, 0xa8, 0x87, 0xe3, 0x2a, 0xd7, 0x69, 0x85, 0x14, 0xf5, 0xa8, 0x6a, 0xb7, 0xdb, 0x7c, 0xd9,
	0xae, 0x2c, 0xec, 0xfc, 0x3e, 0x47, 0x96, 0xd2, 0x06, 0x09, 0x5d, 0x23, 0x49, 0x8b, 0xa4, 0xf2,
	0xfb, 0xe4, 0x5f, 0x0e, 0x46, 0xe9, 0x7e, 0xba, 0xb9, 0xf7, 0xff, 0x08, 0xdf, 0x61, 0x57, 0x6b,
	0xbd, 0x66, 0xad, 0x51, 0xc9, 0xd1, 0x32, 0x21, 0xbd, 0xa3, 0x63, 0xbb, 0x5d, 0x6d, 0x35, 0xda,
	0xbd, 0xca, 0x1c, 0xa5, 0xa4, 0x5c, 0x3b, 0x3a, 0xea, 0x30, 0x70, 0x70, 0x7a, 0xc4, 0x3c, 0xbd,
	0x41, 0x56, 0x0e, 0x1b, 0x2f, 0xab, 0xb5, 0x77, 0xfa, 0xd2, 0x44, 0xc3, 0xd7, 0xe9, 0x4d, 0xb2,
	0x61, 0xe0, 0xee, 0xd1, 0xe1, 0x11, 0xfb, 0xe1, 0xb8, 0x71, 0xdc, 0x30, 0xc2, 0x05, 0x18, 0x53,
	0x3b, 0x6a, 0x75, 0x1a, 0xbd, 0x66, 0xaf, 0xf9, 0x26, 0x81, 0x17, 0xe9, 0x1a, 0xa9, 0x98, 0xe5,
	0x7c, 0xfe, 0xe6, 0x73, 0x83, 0xe6, 0xe9, 0x2a, 0x59, 0x7e, 0xdb, 0x68, 0xbc, 0x6e, 0xb4, 0xeb,
	0x0c, 0x17, 0xd3, 0x78, 0x57, 0x59, 0x02, 0xf0, 0xf0, 0xa8, 0x56, 0x3d, 0xcc, 0x2c, 0x85, 0xd0,
	0x12, 0x59, 0xea, 0x76, 0x1a, 0xb5, 0x5e, 0xb5, 0x77, 0x64, 0x57, 0x0a, 0x3b, 0x7b, 0xc4, 0xc2,
	0x5b, 0x5a, 0xd8, 0x04, 0xc8, 0xe3, 0x62, 0xa1, 0xe2, 0xa4, 0x5e, 0xa5, 0x64, 0xfe, 0xd7, 0x2a,
	0x0c, 0x92, 0x1b, 0x5f, 0xf8, 0xfb, 0x71, 0x87, 0x54, 0xa6, 0xcb, 0x20, 0xf8, 0xe2, 0xc9, 0x42,
	0xa8, 0xf2, 0x11, 0xbe, 0x3b, 0x8b, 0x3d, 0x7b, 0x5a, 0xc9, 0x4d, 0x83, 0x3f, 0x7d, 0xfa, 0xb4,
	0x32, 0xf7, 0xf8, 0x6f, 0x73, 0xe4, 0xc6, 0xcc, 0xf0, 0x4a, 0xef, 0x91, 0x3f, 0x16, 0x77, 0x2b,
	0x1f, 0xd1, 0x8f, 0xc9, 0xed, 0xd9, 0xa4, 0x43, 0x43, 0xc9, 0xd1, 0x1d, 0x72, 0x67, 0x36, 0x25,
	0xf9, 0x55, 0x5c, 0x65, 0xee, 0xe0, 0xfa, 0xab, 0xdc, 0xef, 0x72, 0x1f, 0xfd, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x14, 0x61, 0xbb, 0xcf, 0xa0, 0x2c, 0x00, 0x00,
}
